"use strict";(self.webpackChunkblog_postgraduate=self.webpackChunkblog_postgraduate||[]).push([[3524],{1709:(i,s,t)=>{t.d(s,{l:()=>a});const a={category:{"/":{path:"/category/",map:{使用指南:{path:"/category/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",indexes:[0,1,2,3,4]},指南:{path:"/category/%E6%8C%87%E5%8D%97/",indexes:[5]},樱桃:{path:"/category/%E6%A8%B1%E6%A1%83/",indexes:[6]},火龙果:{path:"/category/%E7%81%AB%E9%BE%99%E6%9E%9C/",indexes:[7]},水果:{path:"/category/%E6%B0%B4%E6%9E%9C/",indexes:[8,7,9,10,11,12]},草莓:{path:"/category/%E8%8D%89%E8%8E%93/",indexes:[8]},蔬菜:{path:"/category/%E8%94%AC%E8%8F%9C/",indexes:[13]},苹果:{path:"/category/%E8%8B%B9%E6%9E%9C/",indexes:[11,12,14,15]},香蕉:{path:"/category/%E9%A6%99%E8%95%89/",indexes:[16,17,9,10]}}}},tag:{"/":{path:"/tag/",map:{禁用:{path:"/tag/%E7%A6%81%E7%94%A8/",indexes:[2]},加密:{path:"/tag/%E5%8A%A0%E5%AF%86/",indexes:[3]},布局:{path:"/tag/%E5%B8%83%E5%B1%80/",indexes:[5]},Markdown:{path:"/tag/markdown/",indexes:[4]},页面配置:{path:"/tag/%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/",indexes:[0]},使用指南:{path:"/tag/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",indexes:[0]},红:{path:"/tag/%E7%BA%A2/",indexes:[13,8,7,6,11,12,14,15]},小:{path:"/tag/%E5%B0%8F/",indexes:[8,6]},圆:{path:"/tag/%E5%9C%86/",indexes:[13,6,11,12,14,15]},大:{path:"/tag/%E5%A4%A7/",indexes:[7,11,12,14,15]},jstat:{path:"/tag/jstat/",indexes:[18]},黄:{path:"/tag/%E9%BB%84/",indexes:[16,17,9,10]},弯曲的:{path:"/tag/%E5%BC%AF%E6%9B%B2%E7%9A%84/",indexes:[16,17,9,10]},长:{path:"/tag/%E9%95%BF/",indexes:[16,17,9,10]}}}}}},4776:(i,s,t)=>{t.d(s,{M:()=>a});const a=["/demo/page.html","/demo/","/demo/disable.html","/demo/encrypt.html","/demo/markdown.html","/demo/layout.html","/posts/cherry.html","/posts/dragonfruit.html","/posts/strawberry.html","/posts/banana/2.html","/posts/banana/1.html","/posts/apple/4.html","/posts/apple/3.html","/posts/tomato.html","/posts/apple/2.html","/posts/apple/1.html","/posts/banana/4.html","/posts/banana/3.html","/monitor-tuning/01/03.html","/http-protocol/09.html","/http-protocol/","/monitor-tuning/00.html","/monitor-tuning/","/http-protocol/01/","/http-protocol/02/01.html","/http-protocol/02/02.html","/http-protocol/02/03.html","/http-protocol/02/04.html","/http-protocol/02/05.html","/http-protocol/02/06.html","/http-protocol/02/07.html","/http-protocol/02/","/http-protocol/03/01.html","/http-protocol/03/02.html","/http-protocol/03/03.html","/http-protocol/03/04.html","/http-protocol/03/05.html","/http-protocol/03/06.html","/http-protocol/03/07.html","/http-protocol/03/","/http-protocol/04/01.html","/http-protocol/04/02.html","/http-protocol/04/03.html","/http-protocol/04/04.html","/http-protocol/04/05.html","/http-protocol/04/06.html","/http-protocol/04/07.html","/http-protocol/04/08.html","/http-protocol/04/","/http-protocol/05/01.html","/http-protocol/05/02.html","/http-protocol/05/03.html","/http-protocol/05/04.html","/http-protocol/05/05.html","/http-protocol/05/06.html","/http-protocol/05/07.html","/http-protocol/05/","/http-protocol/06/01.html","/http-protocol/06/02.html","/http-protocol/06/03.html","/http-protocol/06/04.html","/http-protocol/06/","/http-protocol/07/01.html","/http-protocol/07/02.html","/http-protocol/07/03.html","/http-protocol/07/04.html","/http-protocol/07/05.html","/http-protocol/07/","/http-protocol/08/","/monitor-tuning/01/01.html","/monitor-tuning/01/02.html","/monitor-tuning/01/04.html","/monitor-tuning/01/05.html","/monitor-tuning/01/","/monitor-tuning/02/01.html","/monitor-tuning/02/02.html","/monitor-tuning/02/","/monitor-tuning/03/01.html","/monitor-tuning/03/02.html","/monitor-tuning/03/","/monitor-tuning/04/01.html","/monitor-tuning/04/02.html","/monitor-tuning/04/03.html","/monitor-tuning/04/04.html","/monitor-tuning/04/","/monitor-tuning/05/01.html","/monitor-tuning/05/02.html","/monitor-tuning/05/03.html","/monitor-tuning/05/04.html","/monitor-tuning/05/","/monitor-tuning/06/01.html","/monitor-tuning/06/02.html","/monitor-tuning/06/03.html","/monitor-tuning/06/04.html","/monitor-tuning/06/05.html","/monitor-tuning/06/","/monitor-tuning/07/01.html","/monitor-tuning/07/02.html","/monitor-tuning/07/03.html","/monitor-tuning/07/","/monitor-tuning/08/01.html","/monitor-tuning/08/02.html","/monitor-tuning/08/03.html","/monitor-tuning/08/","/intro.html"]},3781:(i,s,t)=>{t.d(s,{U:()=>a});const a={article:{"/":{path:"/article/",indexes:[13,0,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,18,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,1,2,3,5,4,104,8,7,6,16,17,9,10,11,12,14,15]}},star:{"/":{path:"/star/",indexes:[9,13,14,0]}},timeline:{"/":{path:"/timeline/",indexes:[19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,18,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,1,2,3,5,4,104,13,8,7,6,16,17,9,10,11,12,14,15,0]}}}},8954:(i,s,t)=>{t.d(s,{B:()=>L});var a={};t.r(a);var n={};t.r(n);var e={};t.r(e);var l={};t.r(l),t.d(l,{default:()=>c});var h={};t.r(h),t.d(h,{default:()=>u});var p={};t.r(p);var r={};t.r(r),t.d(r,{default:()=>_});var o={};t.r(o),t.d(o,{default:()=>I});var d=t(3349),k=t(1781),g=t(9212);const c={enhance:({app:i})=>{i.component("CodeTabs",k.S),i.component("Tabs",g.t)}};var m=t(8031),b=t(3027);const u={enhance:({app:i})=>{i.component("CodeDemo",m.A),i.component("MdDemo",b.A)}};var y=t(8913),A=t(355),v=t(457),F=t(6990),T=t(2402),f=t(7786),B=t(9403),C=t(596),E=t(8831);const _={enhance:({app:i})=>{(0,T.L4)("FontIcon")||i.component("FontIcon",B.A),(0,T.L4)("Badge")||i.component("Badge",C.A),(0,T.L4)("VPCard")||i.component("VPCard",E.A)},setup:()=>{(0,f.r9V)("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/brands.min.js",(()=>{}),{attrs:{"data-auto-replace-svg":"nest"}}),(0,f.r9V)("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/solid.min.js",(()=>{}),{attrs:{"data-auto-replace-svg":"nest"}}),(0,f.r9V)("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/fontawesome.min.js",(()=>{}),{attrs:{"data-auto-replace-svg":"nest"}})},rootComponents:[]};var w=t(6358),P=t(3827),x=t(1599),H=t(5054),D=t(783),S=t(8465),M=t(641),z=t(7107),j=t(9920);(0,S.M_)((i=>{const s=i.t,t=!1!==i.I,a=i.i;return t?{title:s,content:a?()=>[(0,M.h)(D.GB,{icon:a}),s]:null,order:i.O,index:i.I}:null}));const I={enhance:({app:i,router:s})=>{const{scrollBehavior:t}=s.options;s.options.scrollBehavior=async(...i)=>(await D.lE.wait(),t(...i)),(0,D.fk)(i),i.component("HopeIcon",D.GB),i.component("BloggerInfo",z.tI),i.component("SocialMedias",z.rS),i.component("GlobalEncrypt",j.J),i.component("LocalEncrypt",j.n)},setup:()=>{(0,D.PV)(),(0,D.i$)(),(0,z.su)()},layouts:{Layout:D.PE,NotFound:D.Mk,BlogCategory:z.Pn,BlogHome:z.qX,BlogType:z.z7,Timeline:z.Kf}},L=[a,n,e,d,l,h,p,e,y,A,v,F,r,w,P,x,H,o].map((i=>i.default)).filter(Boolean)},8164:(i,s,t)=>{t.d(s,{J:()=>n,c:()=>a});const a=JSON.parse("{}"),n=Object.fromEntries([["/",{loader:()=>t.e(4470).then(t.bind(t,6127)),meta:{t:"Leo博客主页",i:"home"}}],["/intro.html",{loader:()=>t.e(3912).then(t.bind(t,6699)),meta:{d:1734540673e3,v:"/assets/images/cover3.jpg",e:"\n<p>技术、求学和生活</p>\n",r:{minutes:.05,words:15},t:"介绍页",i:"circle-info",y:"a"}}],["/demo/",{loader:()=>t.e(3320).then(t.bind(t,5351)),meta:{d:1734540756e3,c:["使用指南"],r:{minutes:.07,words:22},t:"主要功能与配置演示",i:"laptop-code",y:"a"}}],["/demo/disable.html",{loader:()=>t.e(2756).then(t.bind(t,4139)),meta:{d:1734540756e3,c:["使用指南"],g:["禁用"],e:"<p>你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。</p>\n",r:{minutes:.43,words:128},t:"布局与功能禁用",i:"gears",O:4,y:"a"}}],["/demo/encrypt.html",{loader:()=>t.e(2581).then(t.bind(t,1314)),meta:{d:1734540756e3,c:["使用指南"],g:["加密"],n:!0,r:{minutes:.51,words:154},t:"密码加密的文章",i:"lock",y:"a"}}],["/demo/layout.html",{loader:()=>t.e(6216).then(t.bind(t,4087)),meta:{d:1734540756e3,c:["指南"],g:["布局"],e:'<p>布局包括:</p>\n<ul>\n<li><a href="https://theme-hope.vuejs.press/zh/guide/layout/navbar.html" target="_blank" rel="noopener noreferrer">导航栏</a></li>\n<li><a href="https://theme-hope.vuejs.press/zh/guide/layout/sidebar.html" target="_blank" rel="noopener noreferrer">侧边栏</a></li>\n<li><a href="https://theme-hope.vuejs.press/zh/guide/layout/footer.html" target="_blank" rel="noopener noreferrer">页脚</a></li>\n</ul>',r:{minutes:.53,words:159},t:"布局",i:"object-group",O:2,y:"a"}}],["/demo/markdown.html",{loader:()=>t.e(8711).then(t.bind(t,2900)),meta:{d:1734540756e3,c:["使用指南"],g:["Markdown"],e:"<p>VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。</p>\n<p>你需要创建并编写 Markdown，以便 VuePress 可以根据文件结构将它们转换为不同的页面。</p>\n",r:{minutes:3.47,words:1041},t:"Markdown 展示",i:"fab fa-markdown",O:2,y:"a"}}],["/demo/page.html",{loader:()=>t.e(645).then(t.bind(t,5397)),meta:{a:"Ms.Hope",d:15778368e5,l:"2020年1月1日",c:["使用指南"],g:["页面配置","使用指南"],u:!0,v:"/assets/images/cover1.jpg",e:"<p><code>more</code> 注释之前的内容被视为文章摘要。</p>\n",r:{minutes:1.76,words:529},t:"页面配置",i:"file",O:3,y:"a"}}],["/http-protocol/09.html",{loader:()=>t.e(4551).then(t.bind(t,9793)),meta:{d:1734580998e3,e:'\n<h2>RFC</h2>\n<p>HTTP</p>\n<ul>\n<li><a href="https://tools.ietf.org/html/rfc2045" target="_blank" rel="noopener noreferrer">RFC2045</a> - MIME(old)</li>\n<li><a href="https://tools.ietf.org/html/rfc2616" target="_blank" rel="noopener noreferrer">RFC2616</a> - HTTP/1.1(old)</li>\n<li><a href="https://tools.ietf.org/html/rfc3986" target="_blank" rel="noopener noreferrer">RFC3986</a> - URI</li>\n<li><a href="https://tools.ietf.org/html/rfc6265" target="_blank" rel="noopener noreferrer">RFC6265</a> - Cookie</li>\n<li><a href="https://tools.ietf.org/html/rfc6648" target="_blank" rel="noopener noreferrer">RFC6648</a> - Deprecating the "X-" Prefix</li>\n<li><a href="https://tools.ietf.org/html/rfc6838" target="_blank" rel="noopener noreferrer">RFC6838</a> - MIME(new)</li>\n<li><a href="https://tools.ietf.org/html/rfc7230" target="_blank" rel="noopener noreferrer">RFC7230</a> - HTTP/1.1(new)</li>\n<li><a href="https://tools.ietf.org/html/rfc7540" target="_blank" rel="noopener noreferrer">RFC7540</a> - HTTP/2</li>\n<li><a href="https://tools.ietf.org/html/rfc7541" target="_blank" rel="noopener noreferrer">RFC7541</a> - HPACK in HTTP/2</li>\n<li><a href="https://tools.ietf.org/html/rfc7838" target="_blank" rel="noopener noreferrer">RFC7838</a> - Alt-Svc</li>\n<li><a href="https://tools.ietf.org/html/draft-ietf-quic-http" target="_blank" rel="noopener noreferrer">RFC????</a> - HTTP/3(Draft)</li>\n</ul>',r:{minutes:1.18,words:355},t:"参考资源",y:"a"}}],["/http-protocol/",{loader:()=>t.e(1434).then(t.bind(t,2976)),meta:{d:1734580998e3,e:'\n<ul>\n<li>\n<p><a href="/blog_postgraduate/http-protocol/01/" target="_blank">01 | 开篇</a></p>\n</li>\n<li>\n<p><a href="/blog_postgraduate/http-protocol/02/" target="_blank">02 | 破冰篇</a></p>\n<ul>\n<li><a href="/blog_postgraduate/http-protocol/02/01.html" target="_blank">01 | 时势与英雄：HTTP 的前世今生</a></li>\n<li><a href="/blog_postgraduate/http-protocol/02/02.html" target="_blank">02 | HTTP 是什么？HTTP 又不是什么？</a></li>\n<li><a href="/blog_postgraduate/http-protocol/02/03.html" target="_blank">03 | HTTP 世界全览：与 HTTP 相关的各种概念</a></li>\n<li><a href="/blog_postgraduate/http-protocol/02/04.html" target="_blank">04 | HTTP 世界全览：与 HTTP 相关的各种协议</a></li>\n<li><a href="/blog_postgraduate/http-protocol/02/05.html" target="_blank">05 | 常说的四层和七层到底是什么？五层、六层哪去了？</a></li>\n<li><a href="/blog_postgraduate/http-protocol/02/06.html" target="_blank">06 | 域名里有哪些门道？</a></li>\n<li><a href="/blog_postgraduate/http-protocol/02/07.html" target="_blank">07 | 自己动手，搭建 HTTP 实验环境</a></li>\n</ul>\n</li>\n<li>\n<p><a href="/blog_postgraduate/http-protocol/03/" target="_blank">03 | 基础篇</a></p>\n<ul>\n<li><a href="/blog_postgraduate/http-protocol/03/01.html" target="_blank">01 | 键入网址再按下回车，后面究竟发生了什么？</a></li>\n<li><a href="/blog_postgraduate/http-protocol/03/02.html" target="_blank">02 | HTTP 报文是什么样子的？</a></li>\n<li><a href="/blog_postgraduate/http-protocol/03/03.html" target="_blank">03 | 应该如何理解请求方法？</a></li>\n<li><a href="/blog_postgraduate/http-protocol/03/04.html" target="_blank">04 | 你能写出正确的网址吗？</a></li>\n<li><a href="/blog_postgraduate/http-protocol/03/05.html" target="_blank">05 | 响应状态码该怎么用？</a></li>\n<li><a href="/blog_postgraduate/http-protocol/03/06.html" target="_blank">06 | HTTP 有哪些特点？</a></li>\n<li><a href="/blog_postgraduate/http-protocol/03/07.html" target="_blank">07 | HTTP 有哪些优点？又有哪些缺点？</a></li>\n</ul>\n</li>\n<li>\n<p><a href="/blog_postgraduate/http-protocol/04/" target="_blank">04 | 进阶篇</a></p>\n<ul>\n<li><a href="/blog_postgraduate/http-protocol/04/01.html" target="_blank">01 | 海纳百川：HTTP 的实体数据</a></li>\n<li><a href="/blog_postgraduate/http-protocol/04/02.html" target="_blank">02 | 把大象装进冰箱：HTTP 传输大文件的方法</a></li>\n<li><a href="/blog_postgraduate/http-protocol/04/03.html" target="_blank">03 | 排队也要讲效率：HTTP 的连接管理</a></li>\n<li><a href="/blog_postgraduate/http-protocol/04/04.html" target="_blank">04 | 四通八达：HTTP 的重定向和跳转</a></li>\n<li><a href="/blog_postgraduate/http-protocol/04/05.html" target="_blank">05 | 让我知道你是谁：HTTP 的 Cookie 机制</a></li>\n<li><a href="/blog_postgraduate/http-protocol/04/06.html" target="_blank">06 | 生鲜速递：HTTP 的缓存控制</a></li>\n<li><a href="/blog_postgraduate/http-protocol/04/07.html" target="_blank">07 | 良心中间商：HTTP 的代理服务</a></li>\n<li><a href="/blog_postgraduate/http-protocol/04/08.html" target="_blank">08 | 冷链周转：HTTP 的缓存代理</a></li>\n</ul>\n</li>\n<li>\n<p><a href="/blog_postgraduate/http-protocol/05/" target="_blank">05 | 安全篇</a></p>\n<ul>\n<li><a href="/blog_postgraduate/http-protocol/05/01.html" target="_blank">01 | TLS 又是什么？</a></li>\n<li><a href="/blog_postgraduate/http-protocol/05/02.html" target="_blank">02 | 固若金汤的根本: 对称加密与非对称加密</a></li>\n<li><a href="/blog_postgraduate/http-protocol/05/03.html" target="_blank">03 | 固若金汤的根本: 数字签名与证书</a></li>\n<li><a href="/blog_postgraduate/http-protocol/05/04.html" target="_blank">04 | 信任始于握手: TLS 1.2 连接过程解析</a></li>\n<li><a href="/blog_postgraduate/http-protocol/05/05.html" target="_blank">05 | 更好更快的握手: TLS 1.3 特性解析</a></li>\n<li><a href="/blog_postgraduate/http-protocol/05/06.html" target="_blank">06 | 连接太慢该怎么办 HTTPS 的优化</a></li>\n<li><a href="/blog_postgraduate/http-protocol/05/07.html" target="_blank">07 | 我应该迁移到 HTTPS 吗？</a></li>\n</ul>\n</li>\n<li>\n<p><a href="/blog_postgraduate/http-protocol/06/" target="_blank">06 | 飞翔篇</a></p>\n<ul>\n<li><a href="/blog_postgraduate/http-protocol/06/01.html" target="_blank">01 | 时代之风：HTTP/2 特性概览</a></li>\n<li><a href="/blog_postgraduate/http-protocol/06/02.html" target="_blank">02 | 时代之风：HTTP/2 内核剖析</a></li>\n<li><a href="/blog_postgraduate/http-protocol/06/03.html" target="_blank">03 | 未来之路：HTTP/3 展望</a></li>\n<li><a href="/blog_postgraduate/http-protocol/06/04.html" target="_blank">04 | 我应该迁移到 HTTP/2 吗？</a></li>\n</ul>\n</li>\n<li>\n<p><a href="/blog_postgraduate/http-protocol/07/" target="_blank">07 | 探索篇</a></p>\n<ul>\n<li><a href="/blog_postgraduate/http-protocol/07/01.html" target="_blank">01 | Nginx：高性能的 Web 服务器</a></li>\n<li><a href="/blog_postgraduate/http-protocol/07/02.html" target="_blank">02 | OpenResty：更灵活的 Web 服务器</a></li>\n<li><a href="/blog_postgraduate/http-protocol/07/03.html" target="_blank">03 | WAF：保护我们的网络服务</a></li>\n<li><a href="/blog_postgraduate/http-protocol/07/04.html" target="_blank">04 | CDN：加速我们的网络服务</a></li>\n<li><a href="/blog_postgraduate/http-protocol/07/05.html" target="_blank">05 | WebSocket：沙盒里的 TCP</a></li>\n</ul>\n</li>\n<li>\n<p><a href="/blog_postgraduate/http-protocol/08/" target="_blank">08 | 总结篇: HTTP 性能优化面面观</a></p>\n</li>\n<li>\n<p><a href="/blog_postgraduate/http-protocol/09.html" target="_blank">RFC 地址与部分推荐</a></p>\n</li>\n</ul>',r:{minutes:1.84,words:553},t:"透视 HTTP 协议",y:"a"}}],["/monitor-tuning/00.html",{loader:()=>t.e(311).then(t.bind(t,9188)),meta:{d:1734580998e3,e:"\n<p><strong>JAVA 性能监控与调优</strong>，在开发阶段下基本上不用，但是在 <strong>生产环境</strong> 下就比较重要了。</p>\n<p>生产环境比较复杂：</p>\n<ol>\n<li>\n<p>硬件问题、网络问题、CPU 利用率高</p>\n</li>\n<li>\n<p>出现问题后不好进行定位</p>\n<p>因为无法像开发环境下那样随随便便就重启应用、修改日志增加日志输出等手段，来进行定位</p>\n</li>\n</ol>\n<p>所以对生产环境进行监控是非常有必要的。这里不讲解基于硬件的监控，我们聚焦在 <strong>对 JAVA 应用的性能做监控与调优</strong></p>",r:{minutes:3.41,words:1022},t:"为什么要学习这课程？",y:"a"}}],["/monitor-tuning/",{loader:()=>t.e(2027).then(t.bind(t,5094)),meta:{d:1734580998e3,e:'\n<h2>必备推荐</h2>\n<blockquote>\n<p><a href="https://github.com/zq99299/monitor-tuning.git" target="_blank" rel="noopener noreferrer">配套练习项目</a></p>\n</blockquote>\n<ul>\n<li>\n<p><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/troubleshoot/index.html" target="_blank" rel="noopener noreferrer">JAVA 平台，标准版故障排除指南</a></p>\n<p>里面列出了很多场景下的故障如何排除，比如死锁，内存溢出等</p>\n</li>\n</ul>',r:{minutes:1.12,words:335},t:"JAVA性能监控调优和运维",y:"a"}}],["/posts/cherry.html",{loader:()=>t.e(2345).then(t.bind(t,7080)),meta:{d:16416864e5,l:"2022年1月9日",c:["樱桃"],g:["红","小","圆"],e:"\n<h2>标题 2</h2>\n<p>这里是内容。</p>\n<h3>标题 3</h3>\n<p>这里是内容。</p>\n",r:{minutes:.11,words:33},t:"樱桃",i:"pen-to-square",y:"a"}}],["/posts/dragonfruit.html",{loader:()=>t.e(5853).then(t.bind(t,452)),meta:{d:16417728e5,l:"2022年1月10日",c:["火龙果","水果"],g:["红","大"],e:"\n<h2>标题 2</h2>\n<p>这里是内容。</p>\n<h3>标题 3</h3>\n<p>这里是内容。</p>\n",r:{minutes:.12,words:36},t:"火龙果",i:"pen-to-square",y:"a"}}],["/posts/strawberry.html",{loader:()=>t.e(8461).then(t.bind(t,8165)),meta:{d:16418592e5,l:"2022年1月11日",c:["水果","草莓"],g:["红","小"],e:"\n<h2>标题 2</h2>\n<p>这里是内容。</p>\n<h3>标题 3</h3>\n<p>这里是内容。</p>\n",r:{minutes:.11,words:34},t:"草莓",i:"pen-to-square",y:"a"}}],["/posts/tomato.html",{loader:()=>t.e(6218).then(t.bind(t,9239)),meta:{d:16419456e5,l:"2022年1月12日",c:["蔬菜"],g:["红","圆"],u:!0,v:"/assets/images/cover2.jpg",e:"\n<h2>标题 2</h2>\n<p>这里是内容。</p>\n<h3>标题 3</h3>\n<p>这里是内容。</p>\n",r:{minutes:.13,words:38},t:"番茄",i:"pen-to-square",y:"a"}}],["/http-protocol/01/",{loader:()=>t.e(2512).then(t.bind(t,1454)),meta:{d:1734580998e3,e:"\n<p>要我写 HTTP 专栏的时候，我的第一反应是：「HTTP 协议好简单的，有这个必要吗？」</p>\n<p>你可能也会有同样的想法：「HTTP 不就是请求 / 响应、GET/POST、Header/Body 吗？网络上的资料一抓一大把，有什么问题搜一下就是了。」</p>\n<p>不瞒你说，我当时就是这么想的，在之前的工作中也是一直这么做的，而且一直「感觉良好」，觉得 HTTP 就是这个样子，没有什么特别的地方，没有什么值得讲的。</p>\n<p>但在编辑的一再坚持下，我「勉为其难」接下了这个任务。然后做了一个小范围的「调查」，问一些周围的同事，各个领域的都有，比如产品、开发、运维、测试、前端、后端、手机端……想看看他们有什么意见。</p>",r:{minutes:7.44,words:2233},t:"01 | 开篇: To Be a HTTP Hero",y:"a"}}],["/http-protocol/02/01.html",{loader:()=>t.e(3338).then(t.bind(t,6887)),meta:{d:1734580998e3,e:"\n<p>HTTP 协议在我们的生活中随处可见，打开手机或者电脑，只要你上网，不论是用 iPhone、Android、Windows 还是 Mac，不论是用浏览器还是 App，不论是看新闻、短视频还是听音乐、玩游戏，后面总会有 HTTP 在默默为你服务。</p>\n<p>据 NetCraft 公司统计，目前全球至少有 16 亿个网站、2 亿多个独立域名，而这个庞大网络世界的底层运转机制就是 HTTP。</p>\n<p>那么，在享受如此便捷舒适的网络生活时，你有没有想过，HTTP 协议是怎么来的？它最开始是什么样子的？又是如何一步一步发展到今天，几乎「统治」了整个互联网世界的呢？</p>\n<p>常言道：<strong>时势造英雄，英雄亦造时势</strong></p>",r:{minutes:10.64,words:3193},t:"01 | 时势与英雄：HTTP 的前世今生",y:"a"}}],["/http-protocol/02/02.html",{loader:()=>t.e(4419).then(t.bind(t,6053)),meta:{d:1734580998e3,e:"\n<p>首先我来问出这个问题：你觉得 HTTP 是什么呢？</p>\n<p>你可能会不假思索、脱口而出：HTTP 就是超文本传输协议，也就是 <strong>H</strong> yper <strong>T</strong> ext  <strong>T</strong> ransfer <strong>P</strong> rotocol。</p>\n<p>回答非常正确！我必须由衷地恭喜你：能给出这个答案，就表明你具有至少 50% HTTP 相关的知识储备，应该算得上是「半个专家」了。</p>\n<p>不过让我们换个对话场景，假设不是我，而是由一位面试官问出刚才的问题呢？</p>\n<p>显然，这个答案有点过于简单了，不能让他满意，他肯定会再追问你一些问题：</p>",r:{minutes:10.74,words:3221},t:"02 | HTTP 是什么？HTTP 又不是什么？",y:"a"}}],["/http-protocol/02/03.html",{loader:()=>t.e(5836).then(t.bind(t,6011)),meta:{d:1734580998e3,e:"\n<p>在上一讲的末尾，我画了一张图，里面是与 HTTP 关联的各种技术和知识点，也可以说是这个专栏的总索引，不知道你有没有认真看过呢？</p>\n<figure><figcaption>img</figcaption></figure>\n<p>那张图左边的部分是与 HTTP 有关系的各种协议，比较偏向于理论；而右边的部分是与 HTTP 有关系的各种应用技术，偏向于实际应用。</p>\n<p>我希望借助这张图帮你澄清与 HTTP 相关的各种概念和角色，让你在实际工作中清楚它们在链路中的位置和作用，知道发起一个 HTTP 请求会有哪些角色参与，会如何影响请求的处理，做到手中有粮，心中不慌。</p>\n",r:{minutes:11.29,words:3386},t:"03 | HTTP 世界全览：与 HTTP 相关的各种概念",y:"a"}}],["/http-protocol/02/04.html",{loader:()=>t.e(853).then(t.bind(t,7481)),meta:{d:1734580998e3,e:"\n<p>在上一讲中，我介绍了与 HTTP 相关的浏览器、服务器、CDN、网络爬虫等应用技术。</p>\n<p>今天要讲的则是比较偏向于理论的各种 HTTP 相关协议，重点是 TCP/IP、DNS、URI、HTTPS 等，希望能够帮你理清楚它们与 HTTP 的关系。</p>\n<p>同样的，我还是画了一张详细的思维导图，你可以点击后仔细查看。</p>\n<figure><figcaption>img</figcaption></figure>\n<h2>TCP/IP</h2>\n<p>TCP/IP 协议是目前网络世界「事实上」的标准通信协议，即使你没有用过也一定听说过，因为它太著名了。</p>\n<p>TCP/IP 协议实际上是一系列网络通信协议的统称，其中最核心的两个协议是 <strong>TCP</strong> 和 <strong>IP</strong> ，其他的还有 UDP、ICMP、ARP 等等，共同构成了一个复杂但有层次的协议栈。</p>",r:{minutes:10.71,words:3214},t:"04 | HTTP 世界全览：与 HTTP 相关的各种协议",y:"a"}}],["/http-protocol/02/05.html",{loader:()=>t.e(5134).then(t.bind(t,870)),meta:{d:1734580998e3,e:"\n<p>在上一讲中，我简单提到了 TCP/IP 协议，它是 HTTP 协议的下层协议，负责具体的数据传输工作。并且还特别说了，TCP/IP 协议是一个 <strong>有层次的协议栈</strong> 。</p>\n<p>在工作中你一定经常听别人谈起什么四层负载均衡、七层负载均衡，什么二层转发、三层路由，那么你真正理解这些层次的含义吗？</p>\n<p>网络分层的知识教科书上都有，但很多都是泛泛而谈，只有学术价值，于是就容易和实际应用脱节，造成的后果就是似懂非懂，真正用的时候往往会一头雾水。</p>\n<p>所以，今天我就从 HTTP 应用的角度，帮你把这些模糊的概念弄清楚。</p>\n<h2>TCP/IP 网络分层模型</h2>",r:{minutes:10.95,words:3286},t:"05 | 常说的四层和七层到底是什么？五层、六层哪去了？",y:"a"}}],["/http-protocol/02/06.html",{loader:()=>t.e(2375).then(t.bind(t,804)),meta:{d:1734580998e3,e:"\n<p>在上一讲里，我们学习了 HTTP 协议使用的 TCP/IP 协议栈，知道了 HTTP 协议是运行在 TCP/IP 上的。</p>\n<p>IP 协议的职责是 <strong>网际互连</strong> ，它在 MAC 层之上，使用 IP 地址把 MAC 编号转换成了四位数字，这就对物理网卡的 MAC 地址做了一层抽象，发展出了许多的「新玩法」。</p>\n<p>例如，分为 A、B、C、D、E 五种类型，公有地址和私有地址，掩码分割子网等。只要每个小网络在 IP 地址这个概念上达成一致，不管它在 MAC 层有多大的差异，都可以接入 TCP/IP 协议栈，最终汇合进整个互联网。</p>\n<p>但接入互联网的计算机越来越多，IP 地址的缺点也就暴露出来了，最主要的是它“对人不友好”，虽然比 MAC 的 16 进制数要好一点，但还是难于记忆和输入。</p>",r:{minutes:11.71,words:3512},t:"06 | 域名里有哪些门道？",y:"a"}}],["/http-protocol/02/07.html",{loader:()=>t.e(5904).then(t.bind(t,7858)),meta:{d:1734580998e3,e:"\n<p>这一讲是「破冰篇」的最后一讲，我会先简单地回顾一下之前的内容，然后在 Windows 系统上实际操作，用几个应用软件搭建出一个「最小化」的 HTTP 实验环境，方便后续的基础篇、进阶篇、安全篇的学习。</p>\n<h2>破冰篇回顾</h2>\n<p>HTTP 协议诞生于 30 年前，设计之初的目的是用来传输纯文本数据。但由于形式灵活，搭配 URI、HTML 等技术能够把互联网上的资源都联系起来，构成一个复杂的超文本系统，让人们自由地获取信息，所以得到了迅猛发展。</p>\n<p>HTTP 有多个版本，目前应用的最广泛的是 HTTP/1.1，它几乎可以说是整个互联网的基石。但 HTTP/1.1 的性能难以满足如今的高流量网站，于是又出现了 HTTP/2 和 HTTP/3。不过这两个新版本的协议还没有完全推广开。在可预见的将来，HTTP/1.1 还会继续存在下去。</p>",r:{minutes:9.98,words:2995},t:"07 | 自己动手，搭建 HTTP 实验环境",y:"a"}}],["/http-protocol/02/",{loader:()=>t.e(189).then(t.bind(t,3988)),meta:{d:1734580998e3,e:'\n<ul>\n<li><a href="/blog_postgraduate/http-protocol/02/01.html" target="_blank">01 | 时势与英雄：HTTP 的前世今生</a></li>\n<li><a href="/blog_postgraduate/http-protocol/02/02.html" target="_blank">02 | HTTP 是什么？HTTP 又不是什么？</a></li>\n<li><a href="/blog_postgraduate/http-protocol/02/03.html" target="_blank">03 | HTTP 世界全览：与 HTTP 相关的各种概念</a></li>\n<li><a href="/blog_postgraduate/http-protocol/02/04.html" target="_blank">04 | HTTP 世界全览：与 HTTP 相关的各种协议</a></li>\n<li><a href="/blog_postgraduate/http-protocol/02/05.html" target="_blank">05 | 常说的四层和七层到底是什么？五层、六层哪去了？</a></li>\n<li><a href="/blog_postgraduate/http-protocol/02/06.html" target="_blank">06 | 域名里有哪些门道？</a></li>\n<li><a href="/blog_postgraduate/http-protocol/02/07.html" target="_blank">07 | 自己动手，搭建 HTTP 实验环境</a></li>\n</ul>',r:{minutes:.35,words:106},t:"02 | 破冰篇",y:"a"}}],["/http-protocol/03/01.html",{loader:()=>t.e(1803).then(t.bind(t,602)),meta:{d:1734580998e3,e:"\n<p>经过上一讲的学习，你是否已经在自己的电脑上搭建好了最小化的 HTTP 实验环境呢？</p>\n<p>我相信你的答案一定是 Yes，那么，让我们立刻开始「螺蛳壳里做道场」，在这个实验环境里看一下 HTTP 协议工作的全过程。</p>\n<h2>使用 IP 地址访问 Web 服务器</h2>\n<p>首先我们运行 www 目录下的 start 批处理程序，启动本机的 OpenResty 服务器，启动后可以用 list 批处理确认服务是否正常运行（两个 nginx 进程）。</p>\n<p>然后我们打开 Wireshark，选择 HTTP TCP port(80) 过滤器，再鼠标双击 Npcap loopback Adapter ，开始抓取本机 127.0.0.1 地址上的网络数据。</p>",r:{minutes:13.42,words:4027},t:"01 | 键入网址再按下回车，后面究竟发生了什么？",y:"a"}}],["/http-protocol/03/02.html",{loader:()=>t.e(530).then(t.bind(t,9219)),meta:{d:1734580998e3,e:"\n<p>在上一讲里，我们在本机的最小化环境了做了两个 HTTP 协议的实验，使用 Wireshark 抓包，弄清楚了 HTTP 协议基本工作流程，也就是 <strong>请求 - 应答</strong>，<strong>一发一收</strong> 的模式。</p>\n<p>可以看到，HTTP 的工作模式是非常简单的，由于 TCP/IP 协议负责底层的具体传输工作，HTTP 协议基本上不用在这方面操心太多。单从这一点上来看，所谓的「超文本传输协议」其实并不怎么管 「传输」的事情，有点「名不副实」。</p>\n<p>那么 HTTP 协议的核心部分是什么呢？</p>\n<p>答案就是它 <strong>传输的报文内容</strong>。</p>",r:{minutes:13.16,words:3949},t:"02 | HTTP 报文是什么样子的？",y:"a"}}],["/http-protocol/03/03.html",{loader:()=>t.e(457).then(t.bind(t,8476)),meta:{d:1734580998e3,e:"\n<p>上一讲我介绍了 HTTP 的报文结构，它是由 header+body 构成，请求头里有请求方法和请求目标，响应头里有状态码和原因短语，今天要说的就是请求头里的请求方法。</p>\n<h2>标准请求方法</h2>\n<p>HTTP 协议里为什么要有「请求方法」这个东西呢？</p>\n<p>这就要从 HTTP 协议设计时的定位说起了。还记得吗？蒂姆·伯纳斯 - 李最初设想的是要用 HTTP 协议构建一个超链接文档系统，使用 URI 来定位这些文档，也就是资源。那么，该怎么在协议里操作这些资源呢？</p>\n<p>很显然，需要有某种「动作的指示」，告诉操作这些资源的方式。所以，就这么出现了「请求方法」。它的实际含义就是客户端发出了一个「动作指令」，要求服务器端对 URI 定位的资源执行这个动作。</p>",r:{minutes:10.8,words:3240},t:"03 | 应该如何理解请求方法？",y:"a"}}],["/http-protocol/03/04.html",{loader:()=>t.e(6568).then(t.bind(t,989)),meta:{d:1734580998e3,e:"\n<p>上一讲里我们一起学习了 HTTP 协议里的请求方法，其中最常用的一个是 GET，它用来从服务器上某个资源获取数据，另一个是 POST，向某个资源提交数据。</p>\n<p>那么，应该用什么来标记服务器上的资源呢？怎么区分「这个」资源和「那个」资源呢？</p>\n<p>经过前几讲的学习，你一定已经知道了，用的是 URI，也就是 <strong>统一资源标识符</strong>（Uniform Resource Identifier）。因为它经常出现在浏览器的地址栏里，所以俗称为网络地址，简称网址。</p>\n<p>严格地说，URI 不完全等同于网址，<strong>它包含有 URL 和 URN 两个部分</strong> ，在 HTTP 世界里用的网址实际上是 URL—— <strong>统一资源定位符</strong>（Uniform Resource Locator）。但因为 URL 实在是太普及了，所以常常把这两者简单地视为相等。</p>",r:{minutes:12.5,words:3749},t:"04 | 你能写出正确的网址吗？",y:"a"}}],["/http-protocol/03/05.html",{loader:()=>t.e(6079).then(t.bind(t,9582)),meta:{d:1734580998e3,e:"\n<p>前两讲中，我们学习了 HTTP 报文里请求行的组成部分，包括请求方法和 URI。有了请求行，加上后面的头字段就形成了请求头，可以通过 TCP/IP 协议发送给服务器。</p>\n<p>服务器收到请求报文，解析后需要进行处理，具体的业务逻辑多种多样，但最后必定是拼出一个响应报文发回客户端。</p>\n<p>响应报文由响应头加响应体数据组成，响应头又由状态行和头字段构成。</p>\n<p>我们先来复习一下状态行的结构，有三部分：</p>\n<figure><figcaption>img</figcaption></figure>\n<p>开头的 Version 部分是 HTTP 协议的版本号，通常是 HTTP/1.1，用处不是很大。</p>",r:{minutes:11.05,words:3314},t:"05 | 响应状态码该怎么用？",y:"a"}}],["/http-protocol/03/06.html",{loader:()=>t.e(3334).then(t.bind(t,3518)),meta:{d:1734580998e3,e:"\n<p>通过基础篇前几讲的学习，你应该已经知道了 HTTP 协议的基本知识，了解它的报文结构，请求头、响应头以及内部的请求方法、URI 和状态码等细节。</p>\n<p>你会不会有种疑惑：HTTP 协议好像也挺简单的啊，凭什么它就能统治互联网这么多年呢？</p>\n<p>所以接下来的这两讲，我会跟你聊聊 HTTP 协议的特点、优点和缺点。既要看到它好的一面，也要正视它不好的一面，只有全方位、多角度了解 HTTP，才能实现“扬长避短”，更好地利用 HTTP。</p>\n<p>今天这节课主要说的是 HTTP 协议的特点，但不会讲它们的好坏，这些特点即有可能是优点，也有可能是缺点，你可以边听边思考。</p>",r:{minutes:8.99,words:2696},t:"06 | HTTP 有哪些特点？",y:"a"}}],["/http-protocol/03/07.html",{loader:()=>t.e(285).then(t.bind(t,8962)),meta:{d:1734580998e3,e:"\n<p>上一讲我介绍了 HTTP 的五个基本特点，这一讲要说的则是它的优点和缺点。其实这些也应该算是 HTTP 的特点，但这一讲会更侧重于评价它们的优劣和好坏。</p>\n<p>上一讲我也留了两道课下作业，不知道你有没有认真思考过，今天可以一起来看看你的答案与我的观点想法是否相符，共同探讨。</p>\n<p>不过在正式开讲之前我还要提醒你一下，<strong>今天的讨论范围仅限于 HTTP/1.1</strong> ，所说的优点和缺点也仅针对 HTTP/1.1。实际上，专栏后续要讲的 HTTPS 和 HTTP/2 都是对 HTTP/1.1 优点的发挥和缺点的完善。</p>\n<h2>简单、灵活、易于扩展</h2>",r:{minutes:10.8,words:3240},t:"07 | HTTP有哪些优点？又有哪些缺点？",y:"a"}}],["/http-protocol/03/",{loader:()=>t.e(358).then(t.bind(t,4201)),meta:{d:1734580998e3,e:'\n<ul>\n<li><a href="/blog_postgraduate/http-protocol/03/01.html" target="_blank">01 | 键入网址再按下回车，后面究竟发生了什么？</a></li>\n<li><a href="/blog_postgraduate/http-protocol/03/02.html" target="_blank">02 | HTTP 报文是什么样子的？</a></li>\n<li><a href="/blog_postgraduate/http-protocol/03/03.html" target="_blank">03 | 应该如何理解请求方法？</a></li>\n<li><a href="/blog_postgraduate/http-protocol/03/04.html" target="_blank">04 | 你能写出正确的网址吗？</a></li>\n<li><a href="/blog_postgraduate/http-protocol/03/05.html" target="_blank">05 | 响应状态码该怎么用？</a></li>\n<li><a href="/blog_postgraduate/http-protocol/03/06.html" target="_blank">06 | HTTP 有哪些特点？</a></li>\n<li><a href="/blog_postgraduate/http-protocol/03/07.html" target="_blank">07 | HTTP 有哪些优点？又有哪些缺点？</a></li>\n</ul>',r:{minutes:.31,words:92},t:"03 | 基础篇",y:"a"}}],["/http-protocol/04/01.html",{loader:()=>t.e(1024).then(t.bind(t,8923)),meta:{d:1734580998e3,e:"\n<p>这一讲是进阶篇的第一讲，从今天开始，我会用连续的 8 讲的篇幅来详细解析 HTTP 协议里的各种头字段，包括定义、功能、使用方式、注意事项等等。学完了这些课程，你就可以完全掌握 HTTP 协议。</p>\n<p>在前面的基础篇里我们了解了 HTTP 报文的结构，知道一个 HTTP 报文是由 <code>header+body</code> 组成的。但那时我们主要研究的是 header，没有涉及到 body。所以，进阶篇的第一讲就从 HTTP 的 body 谈起。</p>\n<h2>数据类型与编码</h2>\n<p>在 TCP/IP 协议栈里，传输数据基本上都是 <code>header+body</code> 的格式。但 TCP、UDP 因为是传输层的协议，它们不会关心 body 数据是什么，只要把数据发送到对方就算是完成了任务。</p>",r:{minutes:11.61,words:3483},t:"01 | 海纳百川：HTTP 的实体数据",y:"a"}}],["/http-protocol/04/02.html",{loader:()=>t.e(8661).then(t.bind(t,6749)),meta:{d:1734580998e3,e:"\n<p>上次我们谈到了 HTTP 报文里的 body，知道了 HTTP 可以传输很多种类的数据，不仅是文本，也能传输图片、音频和视频。</p>\n<p>早期互联网上传输的基本上都是只有几 K 大小的文本和小图片，现在的情况则大有不同。网页里包含的信息实在是太多了，随随便便一个主页 HTML 就有可能上百 K，高质量的图片都以 M 论，更不要说那些电影、电视剧了，几 G、几十 G 都有可能。</p>\n<p>相比之下，100M 的光纤固网或者 4G 移动网络在这些大文件的压力下都变成了 「小水管」，无论是上传还是下载，都会把网络传输链路挤的「满满当当」。</p>\n<p>所以，<strong>如何在有限的带宽下高效快捷地传输这些大文件就成了一个重要的课题</strong> 。这就好比是已经打开了冰箱门（建立连接），该怎么把大象（文件）塞进去再关上门（完成传输）呢？</p>",r:{minutes:16.19,words:4856},t:"02 | 把大象装进冰箱：HTTP 传输大文件的方法",y:"a"}}],["/http-protocol/04/03.html",{loader:()=>t.e(4590).then(t.bind(t,4560)),meta:{d:1734580998e3,e:'\n<p>在 <a href="/blog_postgraduate/http-protocol/03/07.html" target="_blank">HTTP 优缺点章节中讲到</a>  HTTP 的性能问题，用了六个字来概括：<strong>不算差，不够好</strong> 。同时，我也谈到了 <strong>队头阻塞</strong> ，但由于时间的限制没有展开来细讲，这次就来好好地看看 HTTP 在连接这方面的表现。</p>\n<p>HTTP 的连接管理也算得上是个老生常谈的话题了，你一定曾经听说过 <strong>短连接</strong>、<strong>长连接</strong> 之类的名词，今天让我们一起来把它们弄清楚。</p>',r:{minutes:12.44,words:3731},t:"03 | 排队也要讲效率：HTTP 的连接管理",y:"a"}}],["/http-protocol/04/04.html",{loader:()=>t.e(2067).then(t.bind(t,7023)),meta:{d:1734580998e3,e:"\n<p>为了实现在互联网上构建超链接文档系统的设想，蒂姆·伯纳斯 - 李发明了万维网，使用 HTTP 协议传输 <strong>超文本</strong> ，让全世界的人都能够自由地共享信息。</p>\n<p><strong>超文本</strong> 里含有 <strong>超链接</strong> ，可以从一个超文本跳跃到另一个超文本，对线性结构的传统文档是一个根本性的变革。</p>\n<p><strong>能够使用超链接在网络上任意地跳转</strong> 也是万维网的一个关键特性。它把分散在世界各地的文档连接在一起，形成了复杂的网状结构，用户可以在查看时随意点击链接、转换页面。再加上浏览器又提供了前进、后退、书签等辅助功能，让用户在文档间跳转时更加方便，有了更多的主动性和交互性。</p>",r:{minutes:11.42,words:3425},t:"04 | 四通八达：HTTP 的重定向和跳转",y:"a"}}],["/http-protocol/04/05.html",{loader:()=>t.e(9836).then(t.bind(t,9377)),meta:{d:1734580998e3,e:"\n<p>前面说到 HTTP 是 「无状态」的，这既是优点也是缺点。优点是服务器没有状态差异，<strong>可以很容易地组成集群</strong> ，而缺点就是无法支持需要记录状态的事务操作。</p>\n<p>好在 HTTP 协议是可扩展的，后来发明的 Cookie 技术，给 HTTP 增加了「记忆能力」。</p>\n<h2>什么是 Cookie？</h2>\n<p>不知道你有没有看过克里斯托弗·诺兰导演的一部经典电影《记忆碎片》（Memento），里面的主角患有短期失忆症，记不住最近发生的事情。</p>\n<p>比如，电影里有个场景，某人刚跟主角说完话，大闹了一通，过了几分钟再回来，主角却是一脸茫然，完全不记得这个人是谁，刚才又做了什么，只能任人摆布。</p>",r:{minutes:10.96,words:3287},t:"05 | 让我知道你是谁：HTTP 的 Cookie 机制",y:"a"}}],["/http-protocol/04/06.html",{loader:()=>t.e(6401).then(t.bind(t,5590)),meta:{d:1734580998e3,e:"\n<p>缓存（Cache）是计算机领域里的一个重要概念，是优化系统性能的利器。</p>\n<p>由于链路漫长，网络时延不可控，浏览器使用 HTTP 获取资源的成本较高。所以，非常有必要把来之不易的数据缓存起来，下次再请求的时候尽可能地 <strong>复用</strong> 。这样，就可以 <strong>避免多次请求 - 应答的通信成本，节约网络带宽</strong>  ，也可以加快响应速度。</p>\n<p>试想一下，如果有几十 K 甚至几十 M 的数据，不是从网络而是从本地磁盘获取，那将是多么大的一笔节省，免去多少等待的时间。</p>\n<p>实际上，HTTP 传输的每一个环节基本上都会有缓存，非常复杂。</p>",r:{minutes:17.04,words:5111},t:"06 | 生鲜速递：HTTP 的缓存控制",y:"a"}}],["/http-protocol/04/07.html",{loader:()=>t.e(5322).then(t.bind(t,2314)),meta:{d:1734580998e3,e:"\n<p>在前面讲 HTTP 协议的时候，我们严格遵循了 HTTP 的 <strong>请求 - 应答</strong> 模型，协议中只有两个互相通信的角色，分别是 <strong>请求方</strong> 浏览器（客户端）和 <strong>应答方</strong> 服务器。</p>\n<p>今天，我们要在这个模型里引入一个新的角色，那就是 <strong>HTTP 代理</strong> 。</p>\n<p>引入 HTTP 代理后，原来简单的双方通信就变复杂了一些，加入了一个或者多个 <strong>中间人</strong> ，但整体上来看，还是一个有顺序关系的链条，而且链条里相邻的两个角色仍然是简单的一对一通信，不会出现越级的情况。</p>",r:{minutes:11.93,words:3578},t:"07 | 良心中间商：HTTP 的代理服务",y:"a"}}],["/http-protocol/04/08.html",{loader:()=>t.e(3551).then(t.bind(t,9625)),meta:{d:1734580998e3,e:'\n<p>前面讲解了 <a href="/blog_postgraduate/http-protocol/04/06.html" target="_blank">HTTP 的缓存控制</a> 和 <a href="/blog_postgraduate/http-protocol/04/07.html" target="_blank">HTTP 的代理服务</a>。那么，把这两者结合起来就是这节课所要说的 <strong>缓存代理</strong>，也就是支持缓存控制的代理服务。</p>\n<p>之前谈到缓存时，主要讲了客户端（浏览器）上的缓存控制，<strong>它能够减少响应时间、节约带宽，提升客户端的用户体验</strong> 。</p>',r:{minutes:11.34,words:3402},t:"08 | 冷链周转：HTTP 的缓存代理",y:"a"}}],["/http-protocol/04/",{loader:()=>t.e(1339).then(t.bind(t,5578)),meta:{d:1734580998e3,e:'\n<ul>\n<li><a href="/blog_postgraduate/http-protocol/04/01.html" target="_blank">01 | 海纳百川：HTTP 的实体数据</a></li>\n<li><a href="/blog_postgraduate/http-protocol/04/02.html" target="_blank">02 | 把大象装进冰箱：HTTP 传输大文件的方法</a></li>\n<li><a href="/blog_postgraduate/http-protocol/04/03.html" target="_blank">03 | 排队也要讲效率：HTTP 的连接管理</a></li>\n<li><a href="/blog_postgraduate/http-protocol/04/04.html" target="_blank">04 | 四通八达：HTTP 的重定向和跳转</a></li>\n<li><a href="/blog_postgraduate/http-protocol/04/05.html" target="_blank">05 | 让我知道你是谁：HTTP 的 Cookie 机制</a></li>\n<li><a href="/blog_postgraduate/http-protocol/04/06.html" target="_blank">06 | 生鲜速递：HTTP 的缓存控制</a></li>\n<li><a href="/blog_postgraduate/http-protocol/04/07.html" target="_blank">07 | 良心中间商：HTTP 的代理服务</a></li>\n<li><a href="/blog_postgraduate/http-protocol/04/08.html" target="_blank">08 | 冷链周转：HTTP 的缓存代理</a></li>\n</ul>',r:{minutes:.38,words:114},t:"03 | 进阶篇",y:"a"}}],["/http-protocol/05/01.html",{loader:()=>t.e(4265).then(t.bind(t,5347)),meta:{d:1734580998e3,e:'\n<p>在 <a href="/blog_postgraduate/http-protocol/03/07.html" target="_blank">HTTP有哪些优点？又有哪些缺点？</a>  曾经谈到过 HTTP 的一些缺点，其中的「无状态」在加入 Cookie 后得到了解决，而另两个缺点—— <strong>明文</strong> 和 <strong>不安全</strong> 仅凭 HTTP 自身是无力解决的，需要引入新的 HTTPS 协议。</p>\n<h2>为什么要有 HTTPS？</h2>\n<p>简单的回答是 <strong>因为 HTTP 不安全</strong> 。</p>\n<p>由于 HTTP <strong>天生明文</strong> 的特点，整个传输过程完全透明，任何人都能够在链路中截获、修改或者伪造请求 / 响应报文，数据不具有可信性。</p>',r:{minutes:13.18,words:3955},t:"01 | TLS 又是什么？",y:"a"}}],["/http-protocol/05/02.html",{loader:()=>t.e(1220).then(t.bind(t,7244)),meta:{d:1734580998e3,e:"\n<p>在上一讲中，我们初步学习了 HTTPS，知道 HTTPS 的安全性是由 TLS 来保证的。</p>\n<p>你一定很好奇，它是怎么为 HTTP 增加了机密性、完整性，身份认证和不可否认等特性的呢？</p>\n<p>先说说机密性。它是信息安全的基础，缺乏机密性 TLS 就会成为无水之源、无根之木。</p>\n<p>实现机密性最常用的手段是 <strong>加密</strong>（encrypt），就是把消息用某种方式转换成谁也看不懂的乱码，只有掌握 <strong>特殊钥匙</strong> 的人才能再转换出原始文本。</p>\n<p>这里的钥匙就叫做 <strong>密钥</strong>（key），加密前的消息叫 <strong>明文</strong>（plain text/clear text），加密后的乱码叫 <strong>密文</strong>（cipher text），使用密钥还原明文的过程叫 <strong>解密</strong>（decrypt），是加密的反操作，加密解密的操作过程就是 <strong>加密算法</strong> 。</p>",r:{minutes:15.22,words:4567},t:"02 | 固若金汤的根本: 对称加密与非对称加密",y:"a"}}],["/http-protocol/05/03.html",{loader:()=>t.e(8059).then(t.bind(t,1685)),meta:{d:1734580998e3,e:'\n<p>上一讲中我们学习了对称加密和非对称加密，以及两者结合起来的混合加密，实现了机密性。</p>\n<p>但仅有机密性，离安全还差的很远。</p>\n<p>黑客虽然拿不到会话密钥，无法破解密文，但可以 <strong>通过窃听收集到足够多的密文，再尝试着修改、重组后发给网站</strong> 。因为没有 <strong>完整性保证</strong> ，服务器只能照单全收，然后他就可以通过服务器的响应获取进一步的线索，最终就会破解出明文。</p>\n<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>截获：注意前面的前提，拿不到会话密匙，无法破解密文，但是可以收集密文，然后重组修改后替换掉内容</p>\n</div>',r:{minutes:18.71,words:5612},t:"03 | 固若金汤的根本: 数字签名与证书",y:"a"}}],["/http-protocol/05/04.html",{loader:()=>t.e(7142).then(t.bind(t,4939)),meta:{d:1734580998e3,e:'\n<p>经过前几讲的介绍，你应该已经熟悉了对称加密与非对称加密、数字签名与证书等密码学知识。</p>\n<p>有了这些知识打底，现在我们就可以正式开始研究 HTTPS 和 TLS 协议了。</p>\n<h2>HTTPS 建立连接</h2>\n<p>当你在浏览器地址栏里键入<strong>https</strong> 开头的 URI，再按下回车，会发生什么呢？</p>\n<p>回忆一下 <a href="/blog_postgraduate/http-protocol/03/01.html" target="_blank">键入网址再按下回车，后面究竟发生了什么？</a> 的内容，你应该知道，浏览器首先要从 URI 里提取出协议名和域名。因为协议名是 <code>https</code> ，所以浏览器就知道了端口号是默认的 443，它再用 DNS 解析域名，得到目标的 IP 地址，然后就可以使用 <strong>三次握手与网站建立 TCP 连接</strong> 了。</p>',r:{minutes:13.74,words:4122},t:"04 | 信任始于握手: TLS 1.2 连接过程解析",y:"a"}}],["/http-protocol/05/05.html",{loader:()=>t.e(2570).then(t.bind(t,2424)),meta:{d:1734580998e3,e:"\n<p>上一讲中我讲了 TLS1.2 的握手过程，你是不是已经完全掌握了呢？</p>\n<p>不过 TLS1.2 已经是 10 年前（2008 年）的老协议了，虽然历经考验，但毕竟岁月不饶人，在安全、性能等方面已经跟不上如今的互联网了。</p>\n<p>于是经过四年、近 30 个草案的反复打磨，TLS1.3 终于在去年（2018 年）粉墨登场，再次确立了信息安全领域的新标准。</p>\n<p>在抓包分析握手之前，我们先来快速浏览一下 TLS1.3 的三个主要改进目标：<strong>兼容</strong>、<strong>安全与性能</strong> 。</p>\n<h2>最大化兼容性</h2>\n<p>由于 1.1、1.2 等协议已经出现了很多年，很多应用软件、中间代理（官方称为<code>MiddleBox</code>）只认老的记录协议格式，更新改造很困难，甚至是不可行（设备僵化）。</p>",r:{minutes:10.49,words:3148},t:"05 | 更好更快的握手: TLS 1.3 特性解析",y:"a"}}],["/http-protocol/05/06.html",{loader:()=>t.e(9e3).then(t.bind(t,3922)),meta:{d:1734580998e3,e:"\n<p>你可能或多或少听别人说过，<code>HTTPS 的连接很慢</code> 。那么慢的原因是什么呢？</p>\n<p>通过前两讲的学习，你可以看到，HTTPS 连接大致上可以划分为两个部分，第一个是建立连接时的 <strong>非对称加密握手</strong> ，第二个是握手后的 <strong>对称加密报文传输</strong> 。</p>\n<p>由于目前流行的 AES、ChaCha20 性能都很好，还有硬件优化，报文传输的性能损耗可以说是非常地小，小到几乎可以忽略不计了。所以，通常所说的 HTTPS 连接慢指的就是 <strong>刚开始建立连接的那段时间</strong> 。</p>",r:{minutes:12.67,words:3801},t:"06 | 连接太慢该怎么办 HTTPS 的优化",y:"a"}}],["/http-protocol/05/07.html",{loader:()=>t.e(6735).then(t.bind(t,1511)),meta:{d:1734580998e3,e:"\n<p>今天是安全篇的最后一讲，我们已经学完了 HTTPS、TLS 相关的大部分知识。不过，或许你心里还会有一些困惑：</p>\n<p>HTTPS 这么复杂，我是否应该迁移到 HTTPS 呢？它能带来哪些好处呢？具体又应该怎么实施迁移呢？</p>\n<p>这些问题不单是你，也是其他很多人，还有当初的我的真实想法，所以今天我就来跟你聊聊这方面的事情。</p>\n<h2>迁移的必要性</h2>\n<p>如果你做移动应用开发的话，那么就一定知道，Apple、Android、某信等开发平台在 2017 年就相继发出通知，要求所有的应用必须使用 HTTPS 连接，禁止不安全的 HTTP。</p>\n<p>在台式机上，主流的浏览器 Chrome、Firefox 等也早就开始强推 HTTPS，把 HTTP 站点打上不安全的标签，给用户以心理压力。</p>",r:{minutes:13.37,words:4011},t:"07 | 我应该迁移到 HTTPS 吗？",y:"a"}}],["/http-protocol/05/",{loader:()=>t.e(9468).then(t.bind(t,1523)),meta:{d:1734580998e3,e:'\n<ul>\n<li><a href="/blog_postgraduate/http-protocol/05/01.html" target="_blank">01 | TLS 又是什么？</a></li>\n<li><a href="/blog_postgraduate/http-protocol/05/02.html" target="_blank">02 | 固若金汤的根本: 对称加密与非对称加密</a></li>\n<li><a href="/blog_postgraduate/http-protocol/05/03.html" target="_blank">03 | 固若金汤的根本: 数字签名与证书</a></li>\n<li><a href="/blog_postgraduate/http-protocol/05/04.html" target="_blank">04 | 信任始于握手: TLS 1.2 连接过程解析</a></li>\n<li><a href="/blog_postgraduate/http-protocol/05/05.html" target="_blank">05 | 更好更快的握手: TLS 1.3 特性解析</a></li>\n<li><a href="/blog_postgraduate/http-protocol/05/06.html" target="_blank">06 | 连接太慢该怎么办 HTTPS 的优化</a></li>\n<li><a href="/blog_postgraduate/http-protocol/05/07.html" target="_blank">07 | 我应该迁移到 HTTPS 吗？</a></li>\n</ul>',r:{minutes:.34,words:101},t:"05 | 安全篇",y:"a"}}],["/http-protocol/06/01.html",{loader:()=>t.e(3078).then(t.bind(t,9049)),meta:{d:1734580998e3,e:'\n<p>在 <a href="/blog_postgraduate/http-protocol/03/07.html" target="_blank">HTTP有哪些优点？又有哪些缺点？</a> 中，我们看到 HTTP 有两个主要的缺点：<strong>安全不足和性能不高</strong></p>\n<p>刚结束的安全篇里的 HTTPS，通过引入 SSL/TLS 在安全上达到了「极致」，但在性能提升方面却是乏善可陈，只优化了握手加密的环节，对于整体的数据传输没有提出更好的改进方案，还只能依赖于「长连接」这种「落后」的技术</p>\n<p>所以，在 HTTPS 逐渐成熟之后，HTTP 就向着性能方面开始发力，走出了另一条进化的道路。</p>',r:{minutes:11.55,words:3465},t:"01 | 时代之风：HTTP/2 特性概览",y:"a"}}],["/http-protocol/06/02.html",{loader:()=>t.e(3247).then(t.bind(t,827)),meta:{d:1734580998e3,e:'\n<p>今天我们继续上一讲的话题，深入 HTTP/2 协议的内部，看看它的实现细节。</p>\n<figure><figcaption>img</figcaption></figure>\n<p>这次实验环境的 URI 是 <code>https://www.metroid.net:8443/31-1</code> ，我用 Wireshark 把请求响应的过程抓包存了下来，文件放在 GitHub 的 <code>wireshark</code> 目录。今天我们就对照着抓包来实地讲解 HTTP/2 的头部压缩、二进制帧等特性。</p>\n<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>上面的链接访问异常，并且配置的 SSLKEYLOGFILE 导入后也不怎么生效，不知道是啥原因</p>\n<p>但是配配套的抓包日志中的 log 是有效果的，也就是上图绿色背景的是导入日志后出现的</p>\n</div>',r:{minutes:13.82,words:4146},t:"02 | 时代之风：HTTP/2 内核剖析",y:"a"}}],["/http-protocol/06/03.html",{loader:()=>t.e(1400).then(t.bind(t,3164)),meta:{d:1734580998e3,e:"\n<p>在前面的两讲里，我们一起学习了 HTTP/2，你也应该看到了 HTTP/2 做出的许多努力，比如头部压缩、二进制分帧、虚拟的流与多路复用，性能方面比 HTTP/1 有了很大的提升，基本上解决了队头阻塞这个老大难问题。</p>\n<h2>HTTP/2 的队头阻塞</h2>\n<p>等等，你可能要发出疑问了：为什么说是 <strong>基本上</strong> ，而不是完全解决了呢？</p>\n<p>这是因为 HTTP/2 虽然使用帧、流、多路复用，没有了队头阻塞，<strong>但这些手段都是在应用层里</strong> ，而在下层，也就是 TCP 协议里，还是会发生队头阻塞。</p>\n<p>这是怎么回事呢？</p>",r:{minutes:10.2,words:3059},t:"03 | 未来之路：HTTP/3 展望",y:"a"}}],["/http-protocol/06/04.html",{loader:()=>t.e(6921).then(t.bind(t,5255)),meta:{d:1734580998e3,e:"\n<p>这一讲是飞翔篇的最后一讲，而 HTTP 的所有知识也差不多快学完了。</p>\n<p>前面你已经看到了新的 HTTP/2 和 HTTP/3 协议，了解了它们的特点和工作原理，如果再联系上前几天安全篇的 HTTPS，你可能又会发出疑问：</p>\n<p>刚费了好大的力气升级到 HTTPS，这又出了一个 HTTP/2，还有再次升级的必要吗？</p>\n<p>与各大浏览器强推 HTTPS 的待遇不一样，HTTP/2 的公布可谓是波澜不惊。虽然它是 HTTP 协议的一个重大升级，但 Apple、Google 等科技巨头并没有像 HTTPS 那样给予大量资源的支持。</p>\n<p>直到今天，HTTP/2 在互联网上还是处于“不温不火”的状态，虽然已经有了不少的网站改造升级到了 HTTP/2，但普及的速度远不及 HTTPS。</p>",r:{minutes:10.73,words:3219},t:"04 | 我应该迁移到 HTTP/2 吗？",y:"a"}}],["/http-protocol/06/",{loader:()=>t.e(2489).then(t.bind(t,3106)),meta:{d:1734580998e3,e:'\n<ul>\n<li><a href="/blog_postgraduate/http-protocol/06/01.html" target="_blank">01 | 时代之风：HTTP/2 特性概览</a></li>\n<li><a href="/blog_postgraduate/http-protocol/06/02.html" target="_blank">02 | 时代之风：HTTP/2 内核剖析</a></li>\n<li><a href="/blog_postgraduate/http-protocol/06/03.html" target="_blank">03 | 未来之路：HTTP/3 展望</a></li>\n<li><a href="/blog_postgraduate/http-protocol/06/04.html" target="_blank">04 | 我应该迁移到 HTTP/2 吗？</a></li>\n</ul>',r:{minutes:.15,words:45},t:"06 | 飞翔篇",y:"a"}}],["/http-protocol/07/01.html",{loader:()=>t.e(4199).then(t.bind(t,8053)),meta:{d:1734580998e3,e:"\n<p>经过前面几大模块的学习，你已经完全掌握了 HTTP 的所有知识，那么接下来请收拾一下行囊，整理一下装备，跟我一起去探索 HTTP 之外的广阔天地。</p>\n<p>现在的互联网非常发达，用户越来越多，网速越来越快，HTTPS 的安全加密、HTTP/2 的多路复用等特性都对 Web 服务器提出了非常高的要求。一个好的 Web 服务器必须要具备稳定、快速、易扩展、易维护等特性，才能够让网站立于不败之地。</p>\n<p>那么，在搭建网站的时候，应该选择什么样的服务器软件呢？</p>\n<p>在开头的几讲里我也提到过，Web 服务器就那么几款，目前市面上主流的只有两个：Apache 和 Nginx，两者合计占据了近 90% 的市场份额。</p>",r:{minutes:10.43,words:3128},t:"01 | Nginx：高性能的 Web 服务器",y:"a"}}],["/http-protocol/07/02.html",{loader:()=>t.e(8558).then(t.bind(t,6133)),meta:{d:1734580998e3,e:"\n<p>在上一讲里，我们看到了高性能的 Web 服务器 Nginx，它资源占用少，处理能力高，是搭建网站的首选。</p>\n<p>虽然 Nginx 成为了 Web 服务器领域无可争议的王者，但它也并不是没有缺点的，毕竟它已经 15 岁了。</p>\n<p>一个人很难超越时代，而时代却可以轻易超越所有人，Nginx 当初设计时针对的应用场景已经发生了变化，它的一些缺点也就暴露出来了。</p>\n<p>Nginx 的服务管理思路延续了当时的流行做法，<strong>使用磁盘上的静态配置文件，所以每次修改后必须重启才能生效</strong> 。</p>\n<p>这在业务频繁变动的时候是非常致命的（例如流行的微服务架构），特别是对于拥有成千上万台服务器的网站来说，仅仅增加或者删除一行配置就要分发、重启所有的机器，对运维是一个非常大的挑战，要耗费很多的时间和精力，成本很高，很不灵活，难以“随需应变”。</p>",r:{minutes:9.34,words:2801},t:"02 | OpenResty：更灵活的 Web 服务器",y:"a"}}],["/http-protocol/07/03.html",{loader:()=>t.e(1253).then(t.bind(t,8496)),meta:{d:1734580998e3,e:"\n<p>在前些天的安全篇里，我谈到了 HTTPS，它使用了 SSL/TLS 协议，加密整个通信过程，能够防止恶意窃听和窜改，保护我们的数据安全。</p>\n<p>但 HTTPS 只是网络安全中很小的一部分，<strong>仅仅保证了「通信链路安全」</strong> ，让第三方无法得知传输的内容。在通信链路的两端，<strong>也就是客户端和服务器，它是无法提供保护的</strong> 。</p>\n<p>因为 HTTP 是一个开放的协议，Web 服务都运行在公网上，任何人都可以访问，所以天然就会成为黑客的攻击目标。</p>\n<p>而且黑客的本领比我们想象的还要大得多。虽然不能在传输过程中做手脚，但他们还可以“假扮”成合法的用户访问系统，然后伺机搞破坏。</p>",r:{minutes:9.14,words:2742},t:"03 | WAF：保护我们的网络服务",y:"a"}}],["/http-protocol/07/04.html",{loader:()=>t.e(1436).then(t.bind(t,1119)),meta:{d:1734580998e3,e:"\n<p>在正式开讲前，我们先来看看到现在为止 HTTP 手头都有了哪些「武器」。</p>\n<p>协议方面，HTTPS 强化通信链路安全、HTTP/2 优化传输效率；应用方面，Nginx/OpenResty 提升网站服务能力，WAF 抵御网站入侵攻击，讲到这里，你是不是感觉还少了点什么？</p>\n<p>没错，在应用领域，还缺一个在外部加速 HTTP 协议的服务，这个就是我们今天要说的 CDN（Content Delivery Network 或 Content Distribution Network），中文名叫 <strong>内容分发网络</strong> 。</p>\n<h2>为什么要有网络加速？</h2>",r:{minutes:10.87,words:3262},t:"04 | CDN：加速我们的网络服务",y:"a"}}],["/http-protocol/07/05.html",{loader:()=>t.e(9267).then(t.bind(t,5602)),meta:{d:1734580998e3,e:"\n<p>在之前讲 TCP/IP 协议栈的时候，我说过有 <code>TCP Socket</code> ，它实际上是一种功能接口，通过这些接口就可以使用 TCP/IP 协议栈在传输层收发数据。</p>\n<p>那么，你知道还有一种东西叫 <code>WebSocket</code> 吗？</p>\n<p>单从名字上看，Web 指的是 HTTP，Socket 是套接字调用，那么这两个连起来又是什么意思呢？</p>\n<p>所谓望文生义，大概你也能猜出来，WebSocket 就是运行在 Web，也就是 HTTP 上的 Socket 通信规范，提供与 TCP Socket 类似的功能，使用它就可以像 TCP Socket 一样调用下层协议栈，任意地收发数据。</p>",r:{minutes:10.38,words:3113},t:"05 | WebSocket：沙盒里的 TCP",y:"a"}}],["/http-protocol/07/",{loader:()=>t.e(3474).then(t.bind(t,3434)),meta:{d:1734580998e3,e:'\n<ul>\n<li><a href="/blog_postgraduate/http-protocol/07/01.html" target="_blank">01 | Nginx：高性能的 Web 服务器</a></li>\n<li><a href="/blog_postgraduate/http-protocol/07/02.html" target="_blank">02 | OpenResty：更灵活的 Web 服务器</a></li>\n<li><a href="/blog_postgraduate/http-protocol/07/03.html" target="_blank">03 | WAF：保护我们的网络服务</a></li>\n<li><a href="/blog_postgraduate/http-protocol/07/04.html" target="_blank">04 | CDN：加速我们的网络服务</a></li>\n<li><a href="/blog_postgraduate/http-protocol/07/05.html" target="_blank">05 | WebSocket：沙盒里的 TCP</a></li>\n</ul>',r:{minutes:.19,words:58},t:"07 | 探索篇",y:"a"}}],["/http-protocol/08/",{loader:()=>t.e(4807).then(t.bind(t,2735)),meta:{d:1734580998e3,e:'\n<p>在最后的这两讲里，我将把散落在前面各个章节的零散知识点整合起来，做一个总结，和你一起聊聊 HTTP 的性能优化。</p>\n<p>由于 HTTPS（SSL/TLS）的优化已经在 <a href="/blog_postgraduate/http-protocol/05/06.html" target="_blank">连接太慢该怎么办：HTTPS的优化</a> 里介绍的比较详细了，所以这次就暂时略过不谈，你可以课后再找机会复习。</p>\n<p>既然要做性能优化，那么，我们就需要知道：什么是性能？它都有哪些指标，又应该如何度量，进而采取哪些手段去优化？</p>\n<p>性能其实是一个复杂的概念。不同的人、不同的应用场景都会对它有不同的定义。对于 HTTP 来说，它又是一个非常复杂的系统，里面有非常多的角色，所以很难用一两个简单的词就能把性能描述清楚。</p>',r:{minutes:19.91,words:5972},t:"08 | 总结篇: HTTP 性能优化面面观",y:"a"}}],["/monitor-tuning/01/01.html",{loader:()=>t.e(9404).then(t.bind(t,2235)),meta:{d:1734580998e3,e:"\n<p>分为 3 大类：</p>\n<ul>\n<li>标准参数</li>\n<li>X 参数：非标准化参数</li>\n<li>XX 参数：非标准化参数，主要用于 JVM 调优和 Debug</li>\n</ul>\n<h2>标准参数</h2>\n<p>在 JVM 各个版本中基本上不变，相对稳定</p>\n<ul>\n<li><code>-help</code></li>\n<li><code>-server -client</code></li>\n<li><code>-version -showversion</code></li>\n<li><code>-cp -classpath</code></li>\n</ul>",r:{minutes:1.4,words:420},t:"JVM 参数类型",y:"a"}}],["/monitor-tuning/01/02.html",{loader:()=>t.e(6385).then(t.bind(t,4611)),meta:{d:1734580998e3,e:"\n<ul>\n<li>\n<p><code>-XX:+PrintFlagsInitial</code>：查看初始值</p>\n</li>\n<li>\n<p><code>-XX:+PrintFlagsFinal</code>：查看最终的值</p>\n<p>一般都有一个默认值，可以通过命令行等配置方式覆盖掉这个默认值，这里查看的则是这个最终的值</p>\n</li>\n<li>\n<p><code>-XX:+UnlockExperimentaIVMOptions</code>：解锁实验参数</p>\n<p>JVM 中有一部分参数是无法直接赋值的，需要加该参数，解锁实验参数，才能配置</p>\n</li>\n<li>\n<p><code>-XX:UnlockDiagnosticVMOpeions</code>：解锁诊断参数</p>\n</li>\n<li>\n<p><code>-XX:+PrintCommandLineFlags</code>：打印命令行参数</p>\n</li>\n</ul>",r:{minutes:2.42,words:727},t:"查看运行时 JVM 参数",y:"a"}}],["/monitor-tuning/01/03.html",{loader:()=>t.e(602).then(t.bind(t,5373)),meta:{d:1734580998e3,g:["jstat"],e:'\n<p><a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jstat.html#BEHHGFAE" target="_blank" rel="noopener noreferrer">jstat</a> 可以查询以下几类等的：</p>\n<ul>\n<li>类装载</li>\n<li>垃圾收集</li>\n<li>JIT 编译</li>\n</ul>\n<h2>语法</h2>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">jstat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> [ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">generalOption</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">outputOptions</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> vmid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> [ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">interval[s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">|</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ms]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> [ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">count</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ]</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ]</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:3.06,words:919},t:"查看 JVM 统计信息",y:"a"}}],["/monitor-tuning/01/04.html",{loader:()=>t.e(8295).then(t.bind(t,4061)),meta:{d:1734580998e3,e:'\n<p>本课程找重点会关注内存与线程相关的东西。</p>\n<p>回顾下 JVM 的内存结构</p>\n<figure><figcaption>image-20210116223917540</figcaption></figure>\n<p>本节会产生一个 <strong>堆区</strong> 和 <strong>非堆区</strong> 的内存溢出，然后使用工具来定位内存溢出的原因</p>\n<h2>准备工作</h2>\n<p>首先创建一个项目，使用 <a href="https://start.spring.io/" target="_blank" rel="noopener noreferrer">https://start.spring.io/</a> 创建一个 spring  boot 项目，要求：</p>',r:{minutes:8.53,words:2560},t:"jmap + MAT 实战内存溢出",y:"a"}}],["/monitor-tuning/01/05.html",{loader:()=>t.e(7072).then(t.bind(t,594)),meta:{d:1734580998e3,e:'\n<p>打印 Java 进程，核心文件或远程调试服务器的 Java 线程堆栈跟踪。</p>\n<p>比如我们观察到 CPU 利用率彪高，这个时候就很有可能发生了死循环之类的</p>\n<p>语法如下：</p>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">jstack</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> [ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">options</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ]</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> pid</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">jstack</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> [ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">options</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ]</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> executable</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> core</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">jstack</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> [ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">options</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> [ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">server-id@</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ]</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> remote-hostname-or-IP</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:5.47,words:1642},t:"jstack 实战死循环与死锁",y:"a"}}],["/monitor-tuning/01/",{loader:()=>t.e(7831).then(t.bind(t,9637)),meta:{d:1734580998e3,e:'\n<ul>\n<li>\n<p><a href="/blog_postgraduate/monitor-tuning/01/01.html" target="_blank">JVM 参数类型</a></p>\n</li>\n<li>\n<p><a href="/blog_postgraduate/monitor-tuning/01/02.html" target="_blank">查看运行时 JVM 参数</a></p>\n</li>\n<li>\n<p><a href="/blog_postgraduate/monitor-tuning/01/03.html" target="_blank">查看 JVM 统计信息</a></p>\n</li>\n<li>\n<p><a href="/blog_postgraduate/monitor-tuning/01/04.html" target="_blank">jmap + MAT 实战内存溢出</a></p>\n</li>\n<li>\n<p><a href="/blog_postgraduate/monitor-tuning/01/05.html" target="_blank">jstack 实战死循环与死锁</a></p>\n</li>\n</ul>',r:{minutes:.18,words:53},t:"基于 JDK 命令行工具的监控",y:"a"}}],["/monitor-tuning/02/01.html",{loader:()=>t.e(3827).then(t.bind(t,2818)),meta:{d:1734580998e3,e:'\n<p>相当于是前面那些命令的一个集成</p>\n<p>JVisualVM 是 java 自带的工具，一般在 jdk 安装目录下的 bin 目录下</p>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 笔者这里是 mac 系统，查找这个文件名</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">mrcode:chapter2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> mrcode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">$ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">mdfind</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> \'jvisualvm\'</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">/usr/bin/jvisualvm</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">   # 这里有一个指令，可以直接在中断中运行 jvisualvm 就打开了</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home/bin/jvisualvm</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.03,words:609},t:"监控本地 JAVA 进程",y:"a"}}],["/monitor-tuning/02/02.html",{loader:()=>t.e(6266).then(t.bind(t,7488)),meta:{d:1734580998e3,e:'\n<h2>Tomcat</h2>\n<p>可以通过「远程」功能来添加远程的 Tomcat 进程，不只是 Tomcat，只要是 Java 进程都可以</p>\n<figure><figcaption>image-20210117221823485</figcaption></figure>\n<p>但是连接远程进程是需要在远端进行配置的。拿 Tomcat 来说，需要修改 <code>Catalina.sh</code> 配置文件，也就是增加 JMX 相关参数</p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>JAVA OPTS="$JAVA OPTS -Dcom.sun.management.jmxremote</span></span>\n<span class="line"><span>-Dcom.sun.management.jmxremote.port=9004</span></span>\n<span class="line"><span>-Dcom.sun.management.jmxremote.authenticate=false</span></span>\n<span class="line"><span>-Dcom.sun.management.jmxremote.ssl=false</span></span>\n<span class="line"><span>-Djava.net.preferlPv4Stack=true</span></span>\n<span class="line"><span>-Djava.rmi.server.hostname=10.110.3.62"</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.5,words:749},t:"监控远程 JAVA 进程",y:"a"}}],["/monitor-tuning/02/",{loader:()=>t.e(4398).then(t.bind(t,9955)),meta:{d:1734580998e3,e:'\n<ul>\n<li><a href="/blog_postgraduate/monitor-tuning/02/01.html" target="_blank">监控本地 JAVA 进程</a></li>\n<li><a href="/blog_postgraduate/monitor-tuning/02/02.html" target="_blank">监控远程 JAVA 进程</a></li>\n</ul>\n<p>本章讲解的并不是该 JVisuaLVM 的全部功能，其他的功能请参阅 <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/visualvm/index.html" target="_blank" rel="noopener noreferrer">官方文档</a>，还有一个 <a href="https://visualvm.github.io/documentation.html" target="_blank" rel="noopener noreferrer">官方的中文文档</a>（某些浏览器打开可能不能正常显示），强烈推荐这个中文文档，里面有一个详细的教程，还是中文的，有任何不明白的就去查阅这个</p>',r:{minutes:.4,words:120},t:"基于 JVisualVM 的可视化监控",y:"a"}}],["/monitor-tuning/03/01.html",{loader:()=>t.e(4722).then(t.bind(t,6504)),meta:{d:1734580998e3,e:'\n<p>去 <a href="https://github.com/btraceio/btrace" target="_blank" rel="noopener noreferrer">Btrace GitHub</a> 下载 zip 的压缩包，笔者这里是 Mac，然后解压后配置几个变量：</p>\n<ul>\n<li>JAVA_HOME：需要配置你当前正在使用的 JAVA</li>\n<li>JAVA_VERSION：这个 JAVA 对应的版本</li>\n<li>BTRACE_HOME：btrace 目录</li>\n</ul>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">vim</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ~/.bash_profile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">export</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> JAVA_HOME</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">Library</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">Java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">JavaVirtualMachines</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">jdk1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">0_201</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">jdk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">Contents</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">Home</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">/</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">export</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> JAVA_VERSION</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"1.8.0_201"</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">export</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> BTRACE_HOME</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">usr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">local</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">btrace</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">export</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> PATH</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">$PATH</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">$BTRACE_HOME</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">bin</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">source</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ~/.bash_profile</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:3.04,words:911},t:"Btrace 安装使用入门",y:"a"}}],["/monitor-tuning/03/02.html",{loader:()=>t.e(8299).then(t.bind(t,1583)),meta:{d:1734580998e3,e:'\n<ul>\n<li>\n<p>如何拦截方法</p>\n<p>如何拦截构造函数、重载方法、普通方法</p>\n</li>\n<li>\n<p>拦截时机</p>\n<p>如：入口、返回、异常 时</p>\n</li>\n<li>\n<p>拦截 this、参数、返回值等</p>\n</li>\n<li>\n<p>其他</p>\n</li>\n</ul>\n<blockquote>\n<p><a href="https://github.com/btraceio/btrace/tree/master/btrace-dist/src/main/resources/samples" target="_blank" rel="noopener noreferrer">这些在官方仓库都有拦截例子</a></p>\n</blockquote>',r:{minutes:6.55,words:1964},t:"Btrace 使用详解",y:"a"}}],["/monitor-tuning/03/",{loader:()=>t.e(2677).then(t.bind(t,7069)),meta:{d:1734580998e3,e:'\n<p>BTrace 是用于 Java 平台的安全，动态跟踪工具。</p>\n<p>BTrace 可用于动态跟踪正在运行的 Java 程序（类似于 DTrace，适用于 OpenSolaris 应用程序和 OS）。BTrace 动态地检测目标应用程序的类以注入跟踪代码（字节码跟踪）。</p>\n<p>它使用到的技术有：JavaCompLierApi、JVMTI、Agent、Instrumentation + ASM</p>\n<ul>\n<li><a href="/blog_postgraduate/monitor-tuning/03/01.html" target="_blank">Btrace 安装使用入门</a></li>\n<li><a href="/blog_postgraduate/monitor-tuning/03/02.html" target="_blank">Btrace 使用详解</a></li>\n</ul>',r:{minutes:.36,words:107},t:"基于 Btrace 的监控调试",y:"a"}}],["/monitor-tuning/04/01.html",{loader:()=>t.e(9009).then(t.bind(t,3806)),meta:{d:1734580998e3,e:'\n<p>使用本地 idea 调试远程部署的项目。它使用了 JDWP 协议来达到此功能</p>\n<p><a href="https://developer.ibm.com/zh/articles/j-lo-jpda3/" target="_blank" rel="noopener noreferrer">JDWP</a> 是 Java Debug Wire Protocol 的缩写，它定义了调试器（debugger）和被调试的 Java 虚拟机（target vm）之间的通信协议。</p>\n<p>笔者这里只记录 spring boot 的启用 jdwp 方法，在运行 jar 包的时候，设置启动变量配置：</p>',r:{minutes:1.32,words:395},t:"Tomcat 远程 debug",y:"a"}}],["/monitor-tuning/04/02.html",{loader:()=>t.e(6300).then(t.bind(t,8939)),meta:{d:1734580998e3,e:'\n<p>tomcat 自带的监控工具。低版本默认开启，高版本默认关闭（因为一些安全原因）。</p>\n<ul>\n<li>文档：<code>docs/manager-howto.html</code></li>\n<li>配置文件：\n<ol>\n<li><code>conf/tomcat-users.xml</code> 添加用户</li>\n<li><code>conf/Catalina/localhost/manager.xml</code>配置运行的远程连接</li>\n<li>重启 tomcat</li>\n</ol>\n</li>\n</ul>\n<p>为了学习后面的课程，笔者下载了 <a href="https://tomcat.apache.org/download-80.cgi" target="_blank" rel="noopener noreferrer">tomcat 8.5.6</a>，它的文档和二进制有分开的包可以下载，二进制包里面的 <code>webapps/docs</code> 目录下就是完整的文档了，就可以不需要单独下载文档包了。</p>',r:{minutes:1.6,words:479},t:"Tomcat-manager 监控 Tomcat",y:"a"}}],["/monitor-tuning/04/03.html",{loader:()=>t.e(6083).then(t.bind(t,2477)),meta:{d:1734580998e3,e:'\n<p><a href="https://github.com/psi-probe/psi-probe" target="_blank" rel="noopener noreferrer">psi-probe GitHUb</a> ，可以下载 <a href="https://repo1.maven.org/maven2/com/github/psi-probe/psi-probe-web/" target="_blank" rel="noopener noreferrer">已经打包好的 war</a>，还可以 clone 项目下来自己编译打包。</p>\n<p>这里笔者下载 <a href="https://repo1.maven.org/maven2/com/github/psi-probe/psi-probe-web/3.5.3/" target="_blank" rel="noopener noreferrer">psi-probe-web 3.5.3 的 war 包</a>，并修改包名为 <code>probe.war</code>，然后放到 tomcat 的 <code>webapps</code> 目录下。</p>',r:{minutes:.46,words:139},t:"psi-probe 监控 Tomcat",y:"a"}}],["/monitor-tuning/04/04.html",{loader:()=>t.e(9854).then(t.bind(t,3241)),meta:{d:1734580998e3,e:"\n<p>有以下三个方面可以调优：</p>\n<ul>\n<li>\n<p>内存优化</p>\n<p>后续会有专门的章节讲解，因为 Tomcat 也是个 java 进程</p>\n</li>\n<li>\n<p>线程优化</p>\n</li>\n<li>\n<p>配置优化</p>\n</li>\n</ul>\n<p>这里着重讲解后面两个方面</p>\n<h2>线程优化</h2>\n<p>配置文档在：<code>docs/config/http.html</code> ，里面有很多的配置信息，我们这里关注的有：</p>\n<ul>\n<li>maxConnections：最大连接数</li>\n<li>acceptCount：相当于队列容量，当超出 maxConnections 时，把请求压入队列中</li>\n<li>maxThreads：最大工作线程</li>\n<li>minSpareThreads：最小空闲工作线程</li>\n</ul>",r:{minutes:1.56,words:469},t:"Tomcat 调优",y:"a"}}],["/monitor-tuning/04/",{loader:()=>t.e(2724).then(t.bind(t,2308)),meta:{d:1734580998e3,e:'\n<ul>\n<li><a href="/blog_postgraduate/monitor-tuning/04/01.html" target="_blank">Tomcat 远程 debug</a></li>\n<li><a href="/blog_postgraduate/monitor-tuning/04/02.html" target="_blank">Tomcat-manager 监控 Tomcat</a></li>\n<li><a href="/blog_postgraduate/monitor-tuning/04/03.html" target="_blank">psi-probe 监控 Tomcat</a></li>\n<li><a href="/blog_postgraduate/monitor-tuning/04/04.html" target="_blank">Tomcat 调优</a></li>\n</ul>',r:{minutes:.1,words:29},t:"Tomcat 性能监控与调优",y:"a"}}],["/monitor-tuning/05/01.html",{loader:()=>t.e(9752).then(t.bind(t,7686)),meta:{d:1734580998e3,e:'\n<p>是 nginx 自带的一个模块，可以使用命令查看是否已经编译进来了</p>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">nginx</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -V</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">nginx</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> version:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> nginx/1.17.4</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">built</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> by</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> cl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 16.00.40219.01</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> for</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 80x86</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">built</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> with</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> OpenSSL</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 1.1.1d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">  10</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> Sep</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 2019</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">TLS</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> SNI</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> support</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> enabled</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">configure</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> arguments:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --with-cc=cl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --builddir=objs.msvc8</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --with-debug</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --prefix=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --conf-path=conf/nginx.conf</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --pid-path=logs/nginx.pid</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --http-log-path=logs/access.log</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --error-log-path=logs/error.log</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --sbin-path=nginx.exe</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --http-client-body-temp-path=temp/client_body_temp</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --http-proxy-temp-path=temp/proxy_temp</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --http-fastcgi-temp-path=temp/fastcgi_temp</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --http-scgi-temp-path=temp/scgi_temp</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --http-uwsgi-temp-path=temp/uwsgi_temp</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --with-cc-opt=-DFD_SETSIZE=1024</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --with-pcre=objs.msvc8/lib/pcre-8.43</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --with-zlib=objs.msvc8/lib/zlib-1.2.11</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --with-http_v2_module</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --with-http_realip_module</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --with-http_addition_module</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --with-http_sub_module</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --with-http_dav_module</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --with-http_stub_status_module</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --with-http_flv_module</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --with-http_mp4_module</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --with-http_gunzip_module</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --with-http_gzip_static_module</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --with-http_auth_request_module</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --with-http_random_index_module</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --with-http_secure_link_module</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --with-http_slice_module</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --with-mail</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --with-stream</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --with-openssl=objs.msvc8/lib/openssl-1.1.1d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --with-openssl-opt=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">\'no-asm no-tests -D_WIN32_WINNT=0x0501\'</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --with-http_ssl_module</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --with-mail_ssl_module</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --with-stream_ssl_module</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.43,words:429},t:"ngx_http_stub_status 监控链接信息",y:"a"}}],["/monitor-tuning/05/02.html",{loader:()=>t.e(941).then(t.bind(t,7853)),meta:{d:1734580998e3,e:'\n<ol>\n<li>\n<p>安装 python-pip</p>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">yum</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> epel-release</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">yum</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> python-pip</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div></li>\n<li>\n<p>安装 ngxtop</p>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">pip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ngxtop</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div></li>\n</ol>',r:{minutes:.54,words:163},t:"ngxtop 监控请求信息",y:"a"}}],["/monitor-tuning/05/03.html",{loader:()=>t.e(1542).then(t.bind(t,9753)),meta:{d:1734580998e3,e:'\n<p><a href="https://blog.51cto.com/hao360/1366846" target="_blank" rel="noopener noreferrer">安装参考这篇文章</a>，它是基于 stub_status 状态信息的，它是基于 php 编写的</p>\n<p>先安装 php 环境</p>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 安装依赖</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">yum</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> php</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> php-gd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> php-soap</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> php-mbstring</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> php-xmlrpc</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> php-dom</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> php-fpm</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -y</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># nginx 整合 pgp-fpm</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 修改 /etc/php-fpm.d/www/conf 文件中的 user 和 group 与 nginx.conf 中的一致</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">user</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">nginx</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">group</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">nginx</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 启动 php-fpm 服务</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">systemctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> start</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> php-fpm</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 修改 nginx 配置</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">location</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ~</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \\.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">php</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">${</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> /</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">usr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">share</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">nginx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">html</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  fastcgi_pass</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> 127</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">9000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  fastcgi_index</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> index</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">php</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  fastcgiparam</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> SCRIPT_FILENAME</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">document_root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">$fastcgi_script_name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  include</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> fastcgi_params</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 重启 nginx</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">nginx</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> reload</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 测试 php 环境是否已经搭建好了</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 在 /usr/share/nginx/html 下编写一个 demo.php 文件</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;?php </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">phpinfo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(); </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">?</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 然后访问 localhost:80/demo.php</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.13,words:340},t:"nginx-rrd 图形化监控",y:"a"}}],["/monitor-tuning/05/04.html",{loader:()=>t.e(8811).then(t.bind(t,3884)),meta:{d:1734580998e3,e:'\n<p>nginx 有很多的配置参数，这里只将常用的一部分：</p>\n<h2>增加工作线程数和并发连接数</h2>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">worker_processes</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">  1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 配置为 CPU 的核心数</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">events</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # 每一个进程打开的最大连接数</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # 包含了 nginx 与客户端 和 nginx 与 upstream 之间的链接</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    worker_connections</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">  1024</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">; </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # 可以一次建立多个连接</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    multi_accept</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    use</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> epoll</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.65,words:494},t:"nginx 调优",y:"a"}}],["/monitor-tuning/05/",{loader:()=>t.e(6195).then(t.bind(t,462)),meta:{d:1734580998e3,e:'\n<ul>\n<li><a href="/blog_postgraduate/monitor-tuning/05/01.html" target="_blank">ngx_http_stub_status 监控链接信息</a></li>\n<li><a href="/blog_postgraduate/monitor-tuning/05/02.html" target="_blank">ngxtop 监控请求信息</a></li>\n<li><a href="/blog_postgraduate/monitor-tuning/05/03.html" target="_blank">nginx-rrd 图形化监控</a></li>\n<li><a href="/blog_postgraduate/monitor-tuning/05/04.html" target="_blank">nginx 调优</a></li>\n</ul>',r:{minutes:1.12,words:336},t:"Nginx 性能监控与调优",y:"a"}}],["/monitor-tuning/06/01.html",{loader:()=>t.e(1279).then(t.bind(t,8007)),meta:{d:1734580998e3,e:'\n<blockquote>\n<p><a href="https://docs.oracle.com/javase/specs/index.html" target="_blank" rel="noopener noreferrer">Java SE 规范所有版本官方地址</a>，包括语言规范和虚拟机规范</p>\n</blockquote>\n<h2>运行时数据区</h2>\n<blockquote>\n<p><a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.5" target="_blank" rel="noopener noreferrer">JDK 8 官方运行时数据区文档</a></p>\n</blockquote>',r:{minutes:9.09,words:2728},t:"JVM 内存结构：基于 JDK 1.8",y:"a"}}],["/monitor-tuning/06/02.html",{loader:()=>t.e(8710).then(t.bind(t,9064)),meta:{d:1734580998e3,g:null,e:"\n<p>JDK 使用了一种算法，它的思想是：<strong>枚举根节点，做可达性分析</strong></p>\n<figure><figcaption>image-20210130221129447</figcaption></figure>\n<p>如上图所示，从根节点开始，引用了哪些对象，一层一层下去，最右侧的不可达，则它是一个垃圾</p>\n<p>根节点有：类加载器、Thread、虚拟机栈的本地变量表、static 成员、常量引用、本地方法栈的变量等等。</p>\n<p>确定垃圾之后，下面来介绍常用的垃圾回收方法</p>\n<h2>标记清除</h2>\n<p>算法：分为「标记」和「清除」两个阶段：</p>",r:{minutes:2.42,words:725},t:"垃圾回收算法",y:"a"}}],["/monitor-tuning/06/03.html",{loader:()=>t.e(3453).then(t.bind(t,8142)),meta:{d:1734580998e3,e:"\n<p>常见的垃圾收集器有三种：</p>\n<ul>\n<li>\n<p>串行收集器 Serial：Serial、Serial Old</p>\n</li>\n<li>\n<p>并行收集器 Parallel：Parallel Scavenge、Parallel Old 以吞吐量优先</p>\n</li>\n<li>\n<p>并发收集器 Concurrent：</p>\n<ul>\n<li>CMS</li>\n<li>G1</li>\n</ul>\n<p>停顿时间优先，也就是响应时间有限</p>\n</li>\n</ul>\n<h2>串行收集器</h2>\n<p>单线程的，发现 jvm 内存不够用，暂停应用程序的执行，执行垃圾回收，回收完成之后，再继续执行应用程序</p>",r:{minutes:8.51,words:2554},t:"垃圾收集器",y:"a"}}],["/monitor-tuning/06/04.html",{loader:()=>t.e(7508).then(t.bind(t,9439)),meta:{d:1734580998e3,e:'\n<p>一个垃圾收集器的性能评估是吞吐量、响应时间，调优也主要是针对这两点进行。</p>\n<p>本章会介绍两个工具：</p>\n<ul>\n<li>\n<p><a href="https://gceasy.io/" target="_blank" rel="noopener noreferrer">gceasy.io</a>：在线的 web 工具</p>\n<p>部分收费</p>\n</li>\n<li>\n<p><a href="https://github.com/chewiebug/GCViewer" target="_blank" rel="noopener noreferrer">GCViewer</a>：开源工具</p>\n</li>\n</ul>',r:{minutes:8.89,words:2666},t:"GC 日志格式与可视化日志分析工具",y:"a"}}],["/monitor-tuning/06/05.html",{loader:()=>t.e(1019).then(t.bind(t,4293)),meta:{d:1734580998e3,e:'\n<h2>GC 调优步骤</h2>\n<ol>\n<li>打印 GC 日志</li>\n<li>根据日志得到关键性能指标</li>\n<li>分析 GC 原因，调优 JVM 参数</li>\n</ol>\n<h2>初始设置</h2>\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 禁用声明式 GC 语法，在程序只中显示的调用 System.gc，禁用这个，不然可能会影响 GC 的表现</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">-XX:+DisableExplicitGC</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 当堆溢出的时候，记录快照</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">-XX:+HeapDumpOnOutofMemoryError</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">-XX:HeapDumpPath</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">$CATALINA</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> HOME/logs/</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 打印 GC 日志</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">-XX:+PrintGCDetails</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">-XX:+PrintGCTimeStamps</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">-XX:+PrintGCDateStamps</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">-Xloggc:$SCATALINA_HOME/logs/gc.log</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.76,words:829},t:"Tomcat 的 GC 调优实战",y:"a"}}],["/monitor-tuning/06/",{loader:()=>t.e(4714).then(t.bind(t,1344)),meta:{d:1734580998e3,e:'\n<ul>\n<li><a href="/blog_postgraduate/monitor-tuning/06/01.html" target="_blank">JVM 内存结构：基于 JDK 1.8</a></li>\n<li><a href="/blog_postgraduate/monitor-tuning/06/02.html" target="_blank">垃圾回收算法</a></li>\n<li><a href="/blog_postgraduate/monitor-tuning/06/03.html" target="_blank">垃圾收集器</a></li>\n<li><a href="/blog_postgraduate/monitor-tuning/06/04.html" target="_blank">GC 日志格式与可视化日志分析工具</a></li>\n<li><a href="/blog_postgraduate/monitor-tuning/06/05.html" target="_blank">Tomcat 的 GC 调优实战</a></li>\n</ul>',r:{minutes:.32,words:97},t:"JVM 层 GC 调优",y:"a"}}],["/monitor-tuning/07/01.html",{loader:()=>t.e(1646).then(t.bind(t,5747)),meta:{d:1734580998e3,e:'\n<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">用法:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> javap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">option</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">s&gt; &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">classe</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">s&gt;</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">其中,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 可能的选项包括:</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  -help</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">  --help</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">  -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">?</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">        输出此用法消息</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  -version</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">                 版本信息</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  -v</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">  -verbose</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">             输出附加信息</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  -l</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">                       输出行号和本地变量表</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  -public</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">                  仅显示公共类和成员</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  -protected</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">               显示受保护的/公共类和成员</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  -package</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">                 显示程序包/受保护的/公共类</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">                           和成员</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (默认)</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  -p</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">  -private</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">             显示所有类和成员</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  -c</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">                       对代码进行反汇编</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  -s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">                       输出内部类型签名</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  -sysinfo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">                 显示正在处理的类的</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">                           系统信息</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (路径, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">大小,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 日期,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> MD5</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 散列</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  -constants</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">               显示最终常量</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  -classpath</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">pat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">h&gt;        </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">指定查找用户类文件的位置</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  -cp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">pat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">h&gt;               </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">指定查找用户类文件的位置</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  -bootclasspath</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">pat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">h&gt;    </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">覆盖引导类文件的位置</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:6.26,words:1878},t:"JVM 字节码指令与 javap",y:"a"}}],["/monitor-tuning/07/02.html",{loader:()=>t.e(7287).then(t.bind(t,2497)),meta:{d:1734580998e3,e:'\n<h2>i++ 与 ++i</h2>\n<p>下面来看看这两个操作的字节码是什么样子的</p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> f3</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">() {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> j </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">++;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(j);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">    }</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:9.04,words:2711},t:"字节码指令简单介绍",y:"a"}}],["/monitor-tuning/07/03.html",{loader:()=>t.e(544).then(t.bind(t,1546)),meta:{d:1734580998e3,e:'\n<ul>\n<li>\n<p>尽量重用对象，不要循环创建对象</p>\n<p>比如：for 循环字符串拼接</p>\n</li>\n<li>\n<p>容器类初始化的时候指定长度</p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> collection </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ArrayList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">5</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Map</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> map </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> HashMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">32</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>版本不同源码的实现不同，JDK8 中，对于 ArrayList 来说，如果不指定初始容量大小，那么则是 0，添加第一个就会触发数组扩容（保存数据使用的是一个 Object 数组 ）</p>\n</li>\n<li>\n<p>ArrayList 随机遍历快，LinkedList 添加快删除快</p>\n</li>\n<li>\n<p>集合遍历尽量减少重复计算</p>\n<p>比如下面这个，将集合的大小用变量 len 存储起来</p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">len </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> collection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">) {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">            </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> }</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是这个从源码中来看，直接返回的常量，看不出什么来。字节码层面笔者太弱，看不太懂。</p>\n</li>\n<li>\n<p>使用 Entry 遍历 Map</p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Map</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Entry</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> entry</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">:</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">entrySet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">){</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">  String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> key </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> entry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getKey</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">  String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> value </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> entry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>\n<li>\n<p>大数组复制用 <code>System.arraycopy</code></p>\n<p>底层使用了 c 代码来实现</p>\n</li>\n<li>\n<p>尽量使用基本类型而不是包装类型</p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Integer i = 100;</span></span>\n<span class="line"><span>System.out.println(i);</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>比如上述代码，它做了一个自动装箱的操作，从字节码中可以看出来使用了 Integer.valueOf 函数进行装箱</p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">         0</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> bipush        </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">100</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">         2</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> invokestatic  #</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">16</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">         5</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> astore_0</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>\n<li>\n<p>不要手动调用 <code>System.gc()</code></p>\n<p>前面讲过了对生产环境进行 GC 调优会禁用该代码，写了也不起作用，还有一个原因是，这个方法只是你通知需要进行 GC 操作，但是什么时候执行是不确定的。</p>\n</li>\n<li>\n<p>及时消除过期对象的引用，防止内存泄露</p>\n</li>\n<li>\n<p>尽量使用非同步的容器</p>\n<p>如  Vector VS ArrayList</p>\n<p>Vector 中几乎所有的操作都加锁了，有读写操作的时候，导致读都是串行的，性能很低</p>\n</li>\n<li>\n<p>尽量减少同步作用范围</p>\n<p><code>synchronized</code> 方法 VS 代码块</p>\n</li>\n<li>\n<p>ThreadLocal 缓存线程不安全的对象</p>\n<p>比如：SimpleDateFormat，它的构造成本较大，而且不是线程安全的，就可以使用 ThreadLocal 缓存起来，在同一个线程中时同一个对象操作（因为同一个线程中没有并发问题，就不会导致使用上的线程安全问题）</p>\n</li>\n<li>\n<p>尽量使用延迟加载</p>\n</li>\n<li>\n<p>尽量减少使用反射，如果必须要用可以考虑加缓存</p>\n</li>\n<li>\n<p>尽量使用连接池、线程池、对象池、缓存</p>\n</li>\n<li>\n<p>及时释放资源</p>\n<p>如 I/O 流、Socket、数据库链接</p>\n</li>\n<li>\n<p>慎用异常，不要用抛异常来表示正常的业务逻辑</p>\n<p>因为在异常的时候，会将整个堆栈记录下来，这会比较耗时</p>\n</li>\n<li>\n<p>String 操作尽量少用正则表达式</p>\n</li>\n<li>\n<p>日志输出注意使用不同的级别</p>\n</li>\n<li>\n<p>日志中参数拼接使用占位符，不要使用 + 号拼接</p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">( </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"ooxx:"</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> orderId);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // 不推荐</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">( </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"ooxx:{}"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, orderId );</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 推荐</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>当你不打印 info 日志级别的时候，使用 + 号拼接的时候也会执行拼接操作，而第二种则不会。</p>\n</li>\n</ul>',r:{minutes:2.52,words:756},t:"常用代码优化方法",y:"a"}}],["/monitor-tuning/07/",{loader:()=>t.e(1233).then(t.bind(t,3409)),meta:{d:1734580998e3,e:'\n<ul>\n<li><a href="/blog_postgraduate/monitor-tuning/07/01.html" target="_blank">JVM 字节码指令与 javap</a></li>\n<li><a href="/blog_postgraduate/monitor-tuning/07/02.html" target="_blank">字节码指令简单介绍</a></li>\n<li><a href="/blog_postgraduate/monitor-tuning/07/03.html" target="_blank">常用代码优化方法</a></li>\n</ul>\n',r:{minutes:.11,words:34},t:"Java 代码层优化",y:"a"}}],["/monitor-tuning/08/01.html",{loader:()=>t.e(1837).then(t.bind(t,5852)),meta:{d:1734580998e3,e:'\n<p>通过KubeSphere方式应该简单太多。但是本次采用传统方式安装，参考了如下安装步骤:</p>\n<blockquote>\n<p><a href="https://blog.csdn.net/qq_41076892/article/details/133872947?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-4-133872947-blog-142829773.235%5Ev43%5Epc_blog_bottom_relevance_base7&amp;spm=1001.2101.3001.4242.3&amp;utm_relevant_index=7" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/qq_41076892/article/details/133872947?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-4-133872947-blog-142829773.235^v43^pc_blog_bottom_relevance_base7&amp;spm=1001.2101.3001.4242.3&amp;utm_relevant_index=7</a></p>\n</blockquote>',r:{minutes:7.23,words:2168},t:"传统方式安装k8s集群",y:"a"}}],["/monitor-tuning/08/02.html",{loader:()=>t.e(4472).then(t.bind(t,7284)),meta:{d:1734580998e3,e:'\n<p>虚拟机centos7.7上安装KubeSphere，没有科学上网<br>\n<br><br>\n参考资料：<br>\n<a href="https://www.kubesphere.io/zh/docs/v4.1/03-installation-and-upgrade/02-install-kubesphere/02-install-kubernetes-and-kubesphere/#_%E5%AE%89%E8%A3%85kubesphere" target="_blank" rel="noopener noreferrer">https://www.kubesphere.io/zh/docs/v4.1/03-installation-and-upgrade/02-install-kubesphere/02-install-kubernetes-and-kubesphere/#_安装kubesphere</a></p>',r:{minutes:1.26,words:377},t:"安装KubeSphere",y:"a"}}],["/monitor-tuning/08/03.html",{loader:()=>t.e(3983).then(t.bind(t,9309)),meta:{d:1734580998e3,e:'\n<h2>常见问题</h2>\n<h3>虚拟机激活后kubesphere登录不了</h3>\n<p>重启虚拟机，等待1min左右</p>\n<h3>kubesphere扩展市场组件为空</h3>\n<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">kubectl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> describe</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> repository.kubesphere.io</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> extensions-museum</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">kubectl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> describe</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> repository</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> extensions-museum</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> kubesphere-system</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">kubectl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> get</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> repository</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> extensions-museum</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -o</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> yaml</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> # 检查看看最近的同步时间</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">kubectl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> describe</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> repository</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> extensions-museum</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">   # 检查看看有没有异常的事件</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 查看问题</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">kubectl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> get</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> pods</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -A</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -o</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> wide</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  # 发现 kubesphere-system   restart-extensions-museum-28876320-8kqfj   0/1     Completed</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">kubectl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> logs</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> extensions-museum-6849d977f-plxs5</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> kubesphere-system</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 进pod</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">kubectl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> exec</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -it</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> extensions-museum-6849d977f-plxs5</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> kubesphere-system</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /bin/sh</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:4.03,words:1210},t:"k8s实战",y:"a"}}],["/monitor-tuning/08/",{loader:()=>t.e(7696).then(t.bind(t,8494)),meta:{d:1734580998e3,e:'\n<ul>\n<li><a href="/blog_postgraduate/monitor-tuning/08/01.html" target="_blank">JVM 字节码指令与 javap</a></li>\n<li><a href="/blog_postgraduate/monitor-tuning/08/02.html" target="_blank">字节码指令简单介绍</a></li>\n<li><a href="/blog_postgraduate/monitor-tuning/08/03.html" target="_blank">常用代码优化方法</a></li>\n</ul>\n',r:{minutes:.1,words:31},t:"KubeSphere安装",y:"a"}}],["/posts/apple/1.html",{loader:()=>t.e(7186).then(t.bind(t,5063)),meta:{d:16409952e5,l:"2022年1月1日",c:["苹果"],g:["红","大","圆"],e:"\n<h2>标题 2</h2>\n<p>这里是内容。</p>\n<h3>标题 3</h3>\n<p>这里是内容。</p>\n",r:{minutes:.11,words:34},t:"苹果 1",i:"pen-to-square",y:"a"}}],["/posts/apple/2.html",{loader:()=>t.e(2475).then(t.bind(t,5456)),meta:{d:16410816e5,l:"2022年1月2日",c:["苹果"],g:["红","大","圆"],e:"\n<p>一个被星标了的苹果文章。</p>\n",r:{minutes:.16,words:48},t:"苹果 2",i:"pen-to-square",y:"a"}}],["/posts/apple/3.html",{loader:()=>t.e(660).then(t.bind(t,9891)),meta:{d:1641168e6,l:"2022年1月3日",c:["苹果","水果"],g:["红","大","圆"],e:"\n<h2>标题 2</h2>\n<p>这里是内容。</p>\n<h3>标题 3</h3>\n<p>这里是内容。</p>\n",r:{minutes:.12,words:36},t:"苹果 3",i:"pen-to-square",y:"a"}}],["/posts/apple/4.html",{loader:()=>t.e(8365).then(t.bind(t,7907)),meta:{d:16412544e5,l:"2022年1月4日",c:["苹果","水果"],g:["红","大","圆"],e:"\n<h2>标题 2</h2>\n<p>这里是内容。</p>\n<h3>标题 3</h3>\n<p>这里是内容。</p>\n",r:{minutes:.12,words:36},t:"苹果 4",i:"pen-to-square",y:"a"}}],["/posts/banana/1.html",{loader:()=>t.e(2325).then(t.bind(t,2032)),meta:{d:16413408e5,l:"2022年1月5日",c:["香蕉","水果"],g:["黄","弯曲的","长"],e:"\n<h2>标题 2</h2>\n<p>这里是内容。</p>\n<h3>标题 3</h3>\n<p>这里是内容。</p>\n",r:{minutes:.13,words:38},t:"香蕉 1",i:"pen-to-square",y:"a"}}],["/posts/banana/2.html",{loader:()=>t.e(8336).then(t.bind(t,241)),meta:{d:16414272e5,l:"2022年1月6日",c:["香蕉","水果"],g:["黄","弯曲的","长"],e:"\n<p>一个被数字 <code>10</code> 星标了的香蕉文章。</p>\n",r:{minutes:.18,words:55},t:"香蕉 2",i:"pen-to-square",y:"a"}}],["/posts/banana/3.html",{loader:()=>t.e(3911).then(t.bind(t,3156)),meta:{d:16415136e5,l:"2022年1月7日",c:["香蕉"],g:["黄","弯曲的","长"],e:"\n<h2>标题 2</h2>\n<p>这里是内容。</p>\n<h3>标题 3</h3>\n<p>这里是内容。</p>\n",r:{minutes:.12,words:36},t:"香蕉 3",i:"pen-to-square",y:"a"}}],["/posts/banana/4.html",{loader:()=>t.e(8986).then(t.bind(t,5296)),meta:{d:16416e8,l:"2022年1月8日",c:["香蕉"],g:["黄","弯曲的","长"],e:"\n<h2>标题 2</h2>\n<p>这里是内容。</p>\n<h3>标题 3</h3>\n<p>这里是内容。</p>\n",r:{minutes:.12,words:36},t:"香蕉 4",i:"pen-to-square",y:"a"}}],["/404.html",{loader:()=>t.e(7490).then(t.bind(t,1489)),meta:{t:""}}],["/posts/",{loader:()=>t.e(8666).then(t.bind(t,8063)),meta:{t:"Posts"}}],["/posts/apple/",{loader:()=>t.e(2653).then(t.bind(t,7025)),meta:{t:"Apple"}}],["/posts/banana/",{loader:()=>t.e(8242).then(t.bind(t,6014)),meta:{t:"Banana"}}],["/category/",{loader:()=>t.e(3583).then(t.bind(t,3233)),meta:{t:"分类",I:!1}}],["/category/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",{loader:()=>t.e(4021).then(t.bind(t,7062)),meta:{t:"使用指南 分类",I:!1}}],["/category/%E6%8C%87%E5%8D%97/",{loader:()=>t.e(8622).then(t.bind(t,1659)),meta:{t:"指南 分类",I:!1}}],["/category/%E6%A8%B1%E6%A1%83/",{loader:()=>t.e(9080).then(t.bind(t,8961)),meta:{t:"樱桃 分类",I:!1}}],["/category/%E7%81%AB%E9%BE%99%E6%9E%9C/",{loader:()=>t.e(8280).then(t.bind(t,3609)),meta:{t:"火龙果 分类",I:!1}}],["/category/%E6%B0%B4%E6%9E%9C/",{loader:()=>t.e(8484).then(t.bind(t,4200)),meta:{t:"水果 分类",I:!1}}],["/category/%E8%8D%89%E8%8E%93/",{loader:()=>t.e(6112).then(t.bind(t,6806)),meta:{t:"草莓 分类",I:!1}}],["/category/%E8%94%AC%E8%8F%9C/",{loader:()=>t.e(3612).then(t.bind(t,5575)),meta:{t:"蔬菜 分类",I:!1}}],["/category/%E8%8B%B9%E6%9E%9C/",{loader:()=>t.e(9793).then(t.bind(t,5568)),meta:{t:"苹果 分类",I:!1}}],["/category/%E9%A6%99%E8%95%89/",{loader:()=>t.e(334).then(t.bind(t,6658)),meta:{t:"香蕉 分类",I:!1}}],["/tag/",{loader:()=>t.e(1797).then(t.bind(t,951)),meta:{t:"标签",I:!1}}],["/tag/%E7%A6%81%E7%94%A8/",{loader:()=>t.e(1331).then(t.bind(t,2134)),meta:{t:"标签: 禁用",I:!1}}],["/tag/%E5%8A%A0%E5%AF%86/",{loader:()=>t.e(8496).then(t.bind(t,5835)),meta:{t:"标签: 加密",I:!1}}],["/tag/%E5%B8%83%E5%B1%80/",{loader:()=>t.e(609).then(t.bind(t,7812)),meta:{t:"标签: 布局",I:!1}}],["/tag/markdown/",{loader:()=>t.e(7931).then(t.bind(t,8216)),meta:{t:"标签: Markdown",I:!1}}],["/tag/%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/",{loader:()=>t.e(8221).then(t.bind(t,9462)),meta:{t:"标签: 页面配置",I:!1}}],["/tag/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",{loader:()=>t.e(1431).then(t.bind(t,8210)),meta:{t:"标签: 使用指南",I:!1}}],["/tag/%E7%BA%A2/",{loader:()=>t.e(4068).then(t.bind(t,1731)),meta:{t:"标签: 红",I:!1}}],["/tag/%E5%B0%8F/",{loader:()=>t.e(3215).then(t.bind(t,1612)),meta:{t:"标签: 小",I:!1}}],["/tag/%E5%9C%86/",{loader:()=>t.e(9048).then(t.bind(t,927)),meta:{t:"标签: 圆",I:!1}}],["/tag/%E5%A4%A7/",{loader:()=>t.e(3047).then(t.bind(t,6481)),meta:{t:"标签: 大",I:!1}}],["/tag/jstat/",{loader:()=>t.e(6942).then(t.bind(t,2077)),meta:{t:"标签: jstat",I:!1}}],["/tag/%E9%BB%84/",{loader:()=>t.e(942).then(t.bind(t,7584)),meta:{t:"标签: 黄",I:!1}}],["/tag/%E5%BC%AF%E6%9B%B2%E7%9A%84/",{loader:()=>t.e(7817).then(t.bind(t,1849)),meta:{t:"标签: 弯曲的",I:!1}}],["/tag/%E9%95%BF/",{loader:()=>t.e(5519).then(t.bind(t,2394)),meta:{t:"标签: 长",I:!1}}],["/article/",{loader:()=>t.e(7511).then(t.bind(t,2772)),meta:{t:"文章",I:!1}}],["/star/",{loader:()=>t.e(7199).then(t.bind(t,353)),meta:{t:"星标",I:!1}}],["/timeline/",{loader:()=>t.e(5464).then(t.bind(t,4695)),meta:{t:"时间轴",I:!1}}]])},8761:(i,s,t)=>{t.d(s,{U:()=>a});const a=JSON.parse('{"base":"/blog_postgraduate/","lang":"zh-CN","title":"博客","description":"Leo的博客","head":[],"locales":{}}')},6653:(i,s,t)=>{t.d(s,{K:()=>a});const a=JSON.parse('{"encrypt":{"config":{"/demo/encrypt.html":["$2a$10$UrJrVJRF1Sya.umuTKqCfeXl9d5/fyk9b9VhQCclHatJmU7o8G5jG"]}},"author":{"name":"Mr.Leo","url":"https://mister-hope.com"},"logo":"https://theme-hope-assets.vuejs.press/logo.svg","repo":"vuepress-theme-hope/vuepress-theme-hope","docsDir":"src","footer":"默认页脚","displayFooter":true,"blog":{"description":"金融IT领域资深开发者求学路","intro":"/intro.html","medias":{"Baidu":"https://example.com","BiliBili":"https://example.com","Bitbucket":"https://example.com","Dingding":"https://example.com","Discord":"https://example.com","Dribbble":"https://example.com","Email":"mailto:info@example.com","Evernote":"https://example.com","Facebook":"https://example.com","Flipboard":"https://example.com","Gitee":"https://example.com","GitHub":"https://example.com","Gitlab":"https://example.com","Gmail":"mailto:info@example.com","Instagram":"https://example.com","Lark":"https://example.com","Lines":"https://example.com","Linkedin":"https://example.com","Pinterest":"https://example.com","Pocket":"https://example.com","QQ":"https://example.com","Qzone":"https://example.com","Reddit":"https://example.com","Rss":"https://example.com","Steam":"https://example.com","Twitter":"https://example.com","Wechat":"https://example.com","Weibo":"https://example.com","Whatsapp":"https://example.com","Youtube":"https://example.com","Zhihu":"https://example.com","VuePressThemeHope":{"icon":"https://theme-hope-assets.vuejs.press/logo.svg","link":"https://theme-hope.vuejs.press"}}},"locales":{"/":{"lang":"zh-CN","navbarLocales":{"langName":"简体中文","selectLangAriaLabel":"选择语言"},"metaLocales":{"author":"作者","date":"写作日期","origin":"原创","views":"访问量","category":"分类","tag":"标签","readingTime":"阅读时间","words":"字数","toc":"此页内容","prev":"上一页","next":"下一页","lastUpdated":"上次编辑于","contributors":"贡献者","editLink":"在 GitHub 上编辑此页","print":"打印"},"blogLocales":{"article":"文章","articleList":"文章列表","category":"分类","tag":"标签","timeline":"时间轴","timelineTitle":"昨日不在","all":"全部","intro":"个人介绍","star":"星标","empty":"$text 为空"},"paginationLocales":{"prev":"上一页","next":"下一页","navigate":"跳转到","action":"前往","errorText":"请输入 1 到 $page 之前的页码！"},"outlookLocales":{"themeColor":"主题色","darkmode":"外观","fullscreen":"全屏"},"encryptLocales":{"iconLabel":"文章已加密","placeholder":"输入密码","remember":"记住密码","errorHint":"请输入正确的密码"},"routeLocales":{"skipToContent":"跳至主要內容","notFoundTitle":"页面不存在","notFoundMsg":["这里什么也没有","我们是怎么来到这儿的？","这 是 四 零 四 !","看起来你访问了一个失效的链接"],"back":"返回上一页","home":"带我回家"},"navbar":["/","/monitor-tuning/","/demo/",{"text":"博文","icon":"pen-to-square","prefix":"/posts/","children":[{"text":"苹果","icon":"pen-to-square","prefix":"apple/","children":[{"text":"苹果1","icon":"pen-to-square","link":"1"},{"text":"苹果2","icon":"pen-to-square","link":"2"},"3","4"]},{"text":"香蕉","icon":"pen-to-square","prefix":"banana/","children":[{"text":"香蕉 1","icon":"pen-to-square","link":"1"},{"text":"香蕉 2","icon":"pen-to-square","link":"2"},"3","4"]},{"text":"樱桃","icon":"pen-to-square","link":"cherry"},{"text":"火龙果","icon":"pen-to-square","link":"dragonfruit"},"tomato","strawberry"]},{"text":"V2 文档","icon":"book","link":"https://theme-hope.vuejs.press/zh/"}],"sidebar":{"/":["",{"text":"技术","icon":"laptop-code","prefix":"monitor-tuning/","link":"monitor-tuning/","children":"structure"},"intro"]}}}}')},4923:(i,s,t)=>{},8123:(i,s,t)=>{t.d(s,{v:()=>a});const a={"/monitor-tuning/":["",{text:"Java 代码层优化",prefix:"07/",collapsible:!0,children:["","01","02","03"]},{text:"JVM 层 GC 调优",prefix:"06/",collapsible:!0,children:["","04","01","05","02","03"]},{text:"KubeSphere安装",prefix:"08/",collapsible:!0,children:["","03","01","02"]},{text:"Nginx 性能监控与调优",prefix:"05/",collapsible:!0,children:["","04","03","01","02"]},{text:"Tomcat 性能监控与调优",prefix:"04/",collapsible:!0,children:["","03","04","01","02"]},"00",{text:"基于 Btrace 的监控调试",prefix:"03/",collapsible:!0,children:["","02","01"]},{text:"基于 JDK 命令行工具的监控",prefix:"01/",collapsible:!0,children:["","04","05","01","03","02"]},{text:"基于 JVisualVM 的可视化监控",prefix:"02/",collapsible:!0,children:["","01","02"]}]}},2878:(i,s,t)=>{t.d(s,{P:()=>a});const a={Baidu:'<svg xmlns="http://www.w3.org/2000/svg" class="icon baidu-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#2319DC"/><path fill="#FFF" d="M320 528c65-14 56-92 54-109-3-26-34-72-76-68-52 4-60 81-60 81-7 35 17 110 82 96m121-131c36 0 65-41 65-92 0-52-29-93-65-93s-65 41-65 93c0 51 29 92 65 92m155 7c48 6 79-46 86-85 6-38-25-84-59-91-35-8-77 46-81 82-5 44 6 87 54 94m191 65c0-19-15-75-73-75-57 0-65 53-65 91 0 35 3 85 75 84 71-2 63-81 63-100m-73 163s-74-57-118-119c-59-92-142-55-170-8s-72 76-78 84-90 53-71 135c18 83 83 81 83 81s49 5 104-7c56-13 104 3 104 3s131 43 166-41c36-84-20-128-20-128"/><path fill="#2319DC" d="M453 552v56h-45s-46 3-61 54c-6 35 4 55 6 59s17 29 53 37h85V553zm-1 172h-34s-24-1-31-29c-4-12 0-26 2-31 2-6 10-19 26-23h37zm60-111v107s2 27 39 37h98V613h-42v108h-40s-13-2-16-12v-97z"/></svg>',BiliBili:'<svg xmlns="http://www.w3.org/2000/svg" class="icon bilibili-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#1296db"/><path fill="#fff" d="M745.363 177.725a47 47 0 0 1 0 66.3L702.5 286.85h44A141 141 0 0 1 887 427.512v281.25a141 141 0 0 1-141 140.626H277.25A141 141 0 0 1 137 708.763v-281.25a141 141 0 0 1 141-141h43.725l-42.788-42.825a47 47 0 1 1 66.263-66.3l99.45 99.45c2.963 2.962 5.438 6.187 7.425 9.637h120.487c1.988-3.45 4.5-6.75 7.463-9.675l99.413-99.45a47 47 0 0 1 66.3 0zm1.012 203.25h-468.75a47 47 0 0 0-46.763 43.388l-.112 3.525v281.25c0 24.712 19.125 44.962 43.387 46.724l3.488.15h468.75a47 47 0 0 0 46.763-43.387l.112-3.487v-281.25c0-26-21-47-47-46.876zm-375 93.75c26 0 47 21 47 47v47a47 47 0 1 1-93.75 0V521.6c0-26 21-47 47-47zm281.25 0c26 0 47 21 47 47v47a47 47 0 1 1-93.75 0V521.6c0-26 21-47 47-47z"/></svg>',Bitbucket:'<svg xmlns="http://www.w3.org/2000/svg" class="icon bitbucket-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#205081"/><path fill="#fff" d="M512 191.32v.01-.01c-152.76 0-277.805 41.114-277.805 92.166 0 13.443 33.353 206.247 46.577 282.708 5.932 34.285 94.508 84.563 231.126 84.563l.102-.407v.407c137.484 0 225.26-50.278 231.192-84.578 13.23-76.457 46.592-269 46.592-282.698.005-51.047-125-92.165-277.784-92.165zm0 397.493c-48.771 0-88.31-39.545-88.31-88.31 0-48.772 39.539-88.306 88.31-88.306s88.31 39.534 88.31 88.31c0 48.766-39.539 88.306-88.31 88.306zm-.05-276.842c-98.256-.153-177.885-17.232-177.855-38.14.036-20.912 79.72-37.731 177.976-37.568 98.256.153 177.884 17.22 177.849 38.139 0 20.908-79.705 37.716-177.966 37.564z"/><path fill="#fff" d="M711.668 642.814c-4.227 0-7.608 2.994-7.608 2.994S635.65 699.987 512 699.987s-192.06-54.18-192.06-54.18-3.386-2.988-7.608-2.988c-5.04 0-9.827 3.391-9.827 10.871 0 .79.076 1.579.224 2.353 10.617 56.826 18.382 97.206 19.736 103.347 9.268 41.805 91.045 73.411 189.525 73.411 98.49 0 180.267-31.606 189.535-73.411 1.364-6.136 9.114-46.49 19.736-103.317.143-.779.224-1.578.224-2.368 0-7.485-4.786-10.881-9.827-10.881zM467.659 500.477a44 44 0 1 0 88.51 0 44 44 0 1 0-88.51 0z"/></svg>',Dingding:'<svg xmlns="http://www.w3.org/2000/svg" class="icon dingding-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#1C9DF7"/><path fill="#fff" d="M760.551 442c0 5-5 13-7.767 20.713-23.302 49.192-82.85 145-82.85 145l-18.124 31.069h85.44L576.727 853.758l36.247-145h-67.316l23.302-95.796c-18.124 5-41.426 10-67.316 18.124 0 0-36.247 20.712-101-38.837 0 0-44.015-38.836-18.124-49.192 10-5 54.37-10 88.029-13 44.014-5.179 72.494-10 72.494-10s-139.81 2.59-173.468-2.589c-33.658-5-75.083-59.549-82.85-108.741 0 0-12.946-25.89 28.48-13 44.013 13 222.66 49.192 222.66 49.192s-235.606-72.494-251.14-90.618c-15.535-18.123-46.604-95.796-41.426-145 0 0 2.59-13 13-7.767 0 0 173.469 80.261 292.566 121.686 119 41.426 222.66 64.727 209.715 119z"/></svg>',Discord:'<svg xmlns="http://www.w3.org/2000/svg" class="icon discord-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#2DAAE1"/><path fill="#fff" d="m422.935 240.147 5.851 8.052c-113.039 34.253-165.649 84.585-165.649 84.585s13.645-8.052 37.024-18.123c66.28-30.215 118.865-38.267 142.244-40.286 3.91 0 7.819-1.994 9.76-1.994 38.966-6.058 81.816-6.058 126.658-2.02 58.462 8.053 122.749 24.157 187.061 62.423 0 0-48.7-48.338-155.862-82.566l7.767-10.071h1.968c13.308.233 91.757 4.246 173.416 68.481 0 0 89.634 169.144 89.634 376.555 1.942-2.02-50.668 92.637-189.003 96.65 0 0-23.405-28.194-40.933-52.35 81.84-24.157 113.013-76.534 113.013-76.534a313.796 313.796 0 0 1-72.106 38.267c-31.172 14.11-60.403 22.162-89.633 28.22-60.404 12.066-114.955 8.027-161.74 0a636.81 636.81 0 0 1-91.576-28.22c-13.644-6.033-29.23-12.065-44.817-22.137-1.941-2.02-3.883-2.02-5.85-4.039-1.943 0-1.943-2.02-1.943-2.02-11.702-6.032-17.528-10.07-17.528-10.07s29.23 52.376 109.104 76.532c-19.47 24.157-40.907 54.371-40.907 54.371-138.36-4.039-190.97-98.67-190.97-98.67 0-207.41 89.633-376.555 89.633-376.555 89.634-70.5 175.384-68.481 175.384-68.481zm213.961 233.017c-35.315 0-65 34.512-65 78s29.412 78 65 78 65-34.512 65-78-29.412-78-65-78zm-233.016 0c-35.315 0-65 34.512-65 78s29.412 78 65 78 64.726-34.512 64.726-78-29.411-78-64.726-78z"/></svg>',Dribbble:'<svg xmlns="http://www.w3.org/2000/svg" class="icon dribbble-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#DC4373"/><path fill="#C13366" d="M716.668 302.752c-13.332 5.154-28.61 3.676-35.726-1.068-86.196-48.27-179.286-62.06-265.482-37.926C292.074 300.212 241.674 437.028 242 564.746c22.622 42.136 52.558 105.234 61.854 153.104l298.24 298.246c210.532-37.376 376.584-203.408 413.986-413.928L716.668 302.752z"/><path fill="#F0F1F1" d="M511.994 219.308c-161.592 0-293.058 131.31-293.058 292.696s131.466 292.684 293.058 292.684c161.598 0 293.07-131.292 293.07-292.684 0-161.386-131.472-292.696-293.07-292.696zm192.842 138.148c33.43 41.432 53.744 93.756 54.682 150.772-11.122-2.282-58.23-11.068-114.526-11.068-18.164 0-37.282.91-56.448 3.278a822.854 822.854 0 0 0-4.938-11.812c-4.972-11.692-10.326-23.29-15.874-34.72 86.642-35.696 128.436-85.238 137.104-96.45zm-192.842-92.33c62.446 0 119.528 23.2 163.126 61.412-6.902 9.416-44.332 56.202-127.876 87.768-38.67-70.688-80.996-129.22-91.07-142.812a247.13 247.13 0 0 1 55.82-6.368zm-106.352 23.99c8.536 11.758 50.928 70.918 90.592 141.036-106.448 27.982-200.976 29.806-223.79 29.806h-2.424c16.39-75.534 67.424-138.298 135.622-170.842zM264.402 512.39c0-2.038.034-4.076.1-6.102 1.48.018 3.666.018 6.5.018 30.726 0 137.382-2.538 247.288-35.154a828.402 828.402 0 0 1 18.928 39.526 232.24 232.24 0 0 0-8.234 2.482C405.236 553.126 337.216 658.936 326.75 676.232c-38.778-43.696-62.348-101.058-62.348-163.842zm247.592 247.246c-56.786 0-109.192-19.232-151.01-51.48 7.074-13.868 58.412-106.3 194.026-153.5a1.806 1.806 0 0 1 .272-.09c34.006 88.53 48.408 162.834 52.358 185.862-29.432 12.374-61.752 19.208-95.646 19.208zm140.236-43.584c-3.32-19.052-16.66-88.688-47.452-173.618 17.27-2.686 34.072-3.748 49.828-3.748 51.748 0 92.23 11.33 101.634 14.204-11.182 67.444-49.794 125.808-104.01 163.162z"/><path fill="#D1D1D1" d="M511.994 219.308c-.382 0-.758.028-1.142.028v45.804c.38 0 .758-.018 1.142-.018 62.446 0 119.528 23.2 163.126 61.412-6.902 9.416-44.332 56.202-127.876 87.768-12.14-22.194-24.642-43.188-36.392-61.968V473.29c2.476-.706 4.954-1.41 7.434-2.144a828.402 828.402 0 0 1 18.928 39.526c-2.776.796-5.514 1.592-8.234 2.478a323.314 323.314 0 0 0-18.128 6.52v53.228a418.976 418.976 0 0 1 44.428-18.332c34.006 88.53 48.408 162.834 52.358 185.862-29.428 12.374-61.746 19.208-95.646 19.208-.382 0-.758-.024-1.142-.024v45.05c.382 0 .758.028 1.142.028 161.598 0 293.07-131.292 293.07-292.684.002-161.388-131.47-292.698-293.068-292.698zm71.614 269.316c-4.972-11.692-10.326-23.29-15.874-34.72 86.64-35.696 128.434-85.236 137.102-96.45 33.43 41.432 53.748 93.756 54.682 150.77-11.122-2.282-58.23-11.068-114.522-11.068-18.164 0-37.282.914-56.448 3.278-1.624-3.932-3.24-7.852-4.94-11.81zm68.622 227.428c-3.32-19.052-16.66-88.688-47.452-173.618 17.27-2.686 34.072-3.748 49.828-3.748 51.748 0 92.23 11.33 101.634 14.204-11.182 67.444-49.794 125.808-104.01 163.162z"/></svg>',Email:'<svg xmlns="http://www.w3.org/2000/svg" class="icon email-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#1384FF"/><path fill="#fff" d="M270.077 286.233H751.99c32.933 0 59.86 24.855 60.274 55.51l-301.023 157L210.217 341.88c.207-30.723 26.927-55.717 59.86-55.717zm-59.929 115.714-.276 277.756c0 30.931 27.134 56.2 60.205 56.2H751.99c33.14 0 60.274-25.269 60.274-56.2V401.81L518.283 551.492a15.88 15.88 0 0 1-14.43 0L210.148 401.947z"/></svg>',Evernote:'<svg xmlns="http://www.w3.org/2000/svg" class="icon evernote-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#14cc45"/><path fill="#595757" d="M347.671 193.259v87.51h-87.51z"/><path fill="#595757" d="M788.047 323.645s3.65-77.491-73.84-103.02c0 0-89.479-12.867-151.41-11.91 0 0-8.595-53.23-103.33-53.23 0 0-89.556-1.244-89.892 70.526v61.671s2.848 14.991-27.833 14.991h-81.581s-34.28 5.282-34.28 72.934c0 0 3.133 120.082 41.322 200.24 0 0 9.398 34.667 58.228 46.577 0 0 95.822 25.477 123.991 21.722 0 0 58.228 22.137 62.008-111.874 0 0 3.755-19.935 6.266 11.392 0 0-1.89 68.948 57.607 72.702 0 0 45.723 12.557 73.892 10.045 0 0 37.568 2.15 37.568 64.158 0 0 13.152 71.665-34.435 71.665h-65.763s-18.149 4.428-18.149-21.877c0 0-4.997-21.878 26.305-21.878h15.534v-43.756h-43.082s-66.332-6.317-66.332 50.047v75.135s9.347 49.866 66.332 49.866h121.273s48.441.44 76.61-90.359c0-.078 48.52-182.323 22.991-435.767zM625.272 486.523c0-21.877 18.02-51.16 39.432-51.16s36.48 36.118 36.48 58.022c-28.79-7.897-45.827-9.606-75.912-6.862z"/></svg>',Facebook:'<svg xmlns="http://www.w3.org/2000/svg" class="icon facebook-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#3c599b"/><path fill="#fff" d="M353.357 400.378h68.151v-66.235c0-29.206.737-74.247 21.952-102.142 22.348-29.542 53.026-49.622 105.794-49.622 85.976 0 122.18 12.263 122.18 12.263L654.4 295.61s-28.407-8.213-54.903-8.213c-26.512 0-50.243 9.5-50.243 35.995v76.988h108.687L650.352 499H549.254v342.602H421.508V499h-68.15v-98.622z"/></svg>',Flipboard:'<svg xmlns="http://www.w3.org/2000/svg" class="icon flipboard-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#e12828"/><path fill="#fff" d="M263.487 261.893H445.92V809.17H263.487V261.893z"/><path fill="#fce9e9" d="M445.92 261.893h364.842v182.435H445.92V261.893z"/><path fill="#f6bebe" d="M445.92 444.328h182.435v182.435H445.92V444.328z"/></svg>',Gitee:'<svg xmlns="http://www.w3.org/2000/svg" class="icon gitee-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#C71D23"/><path fill="#fff" d="M772.953 454.723H480.17v.006a25.46 25.46 0 0 0-25.46 25.453l-.025 63.649a25.46 25.46 0 0 0 25.46 25.466l178.242-.007a25.46 25.46 0 0 1 25.459 25.46v12.73c0 42.18-34.198 76.378-76.378 76.378H365.583a25.46 25.46 0 0 1-25.46-25.46V416.533h-.006c0-42.18 34.192-76.378 76.378-76.378h356.388v-.013a25.46 25.46 0 0 0 25.46-25.446l.057-63.65h.013a25.46 25.46 0 0 0-25.46-25.471l-356.432.012c-105.453 0-190.946 85.493-190.946 190.946v356.433a25.46 25.46 0 0 0 25.46 25.46H626.56c94.913 0 171.852-76.94 171.852-171.852V480.182a25.46 25.46 0 0 0-25.46-25.46z"/></svg>',GitHub:'<svg xmlns="http://www.w3.org/2000/svg" class="icon github-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#171515"/><path fill="#fff" d="M509.423 146.442c-200.317 0-362.756 162.42-362.756 362.8 0 160.266 103.936 296.24 248.109 344.217 18.139 3.327 24.76-7.872 24.76-17.486 0-8.613-.313-31.427-.49-61.702-100.912 21.923-122.205-48.63-122.205-48.63-16.495-41.91-40.28-53.067-40.28-53.067-32.937-22.51 2.492-22.053 2.492-22.053 36.407 2.566 55.568 37.386 55.568 37.386 32.362 55.438 84.907 39.43 105.58 30.143 3.296-23.444 12.667-39.43 23.032-48.498-80.557-9.156-165.246-40.28-165.246-179.297 0-39.604 14.135-71.988 37.342-97.348-3.731-9.178-16.18-46.063 3.556-96.009 0 0 30.46-9.754 99.76 37.19 28.937-8.048 59.97-12.071 90.823-12.211 30.807.14 61.843 4.165 90.822 12.21 69.26-46.944 99.663-37.189 99.663-37.189 19.792 49.946 7.34 86.831 3.61 96.01 23.25 25.359 37.29 57.742 37.29 97.347 0 139.366-84.82 170.033-165.637 179.013 13.026 11.2 24.628 33.342 24.628 67.182 0 48.498-.445 87.627-.445 99.521 0 9.702 6.535 20.988 24.945 17.444 144.03-48.067 247.881-183.95 247.881-344.175 0-200.378-162.442-362.798-362.802-362.798z"/></svg>',Gitlab:'<svg xmlns="http://www.w3.org/2000/svg" class="icon gitlab-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#E8F0FF"/><path fill="#E24329" d="m512 808 110-340H402z"/><path fill="#FC6D26" d="M512 808 402 468H247z"/><path fill="#E24329" d="M247 468h155l-67-204c-4-11-19-11-22 0z"/><path fill="#FC6D26" d="m512 808 110-340h156z"/><path fill="#FCA326" d="m778 468 33 104c3 10-1 19-9 25L512 808z"/><path fill="#E24329" d="M778 468H622l68-204c3-11 18-11 21 0z"/><path fill="#FCA326" d="M512 808 222 597c-8-5-12-16-9-25l34-104z"/></svg>',Gmail:'<svg xmlns="http://www.w3.org/2000/svg" class="icon gmail-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#DB4437"/><path fill="#E67C73" d="M277.48 285.567h465.767v441.362H277.48V285.567z"/><path fill="#FFF" d="M282.543 285.567h-10.645c-25.962 0-47.122 21.808-47.122 48.705v343.952c0 26.897 21.08 48.705 47.122 48.705h24.976V407.954l213.49 169.95 213.489-169.95V726.93h24.975c26.04 0 47.123-21.809 47.123-48.705V334.272c0-26.897-21.134-48.705-47.123-48.705h-10.644L510.364 480.44 282.542 285.567z"/></svg>',Instagram:'<svg xmlns="http://www.w3.org/2000/svg" class="icon instagram-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#181818"/><path fill="#fff" d="M512 348.16c-88.222 0-163.84 71.417-163.84 163.84 0 88.222 71.417 163.84 163.84 163.84 88.222 0 163.84-71.417 163.84-163.84 0-88.222-75.618-163.84-163.84-163.84zm0 268.866c-58.814 0-105.026-46.212-105.026-105.026S453.186 406.974 512 406.974 617 453.186 617 512s-46.186 105-105 105zM680.041 306.15c-21 0-37.81 16.804-37.81 37.809s16.805 37.81 37.81 37.81 37.81-16.805 37.81-37.81-16.805-37.81-37.81-37.81z"/><path fill="#FFF" d="M659.036 196.923h-16.804c-50.413-4.2-210.051-4.2-260.464 0-96.623-4.2-180.644 71.418-184.845 168.041v16.804c-4.2 50.413-4.2 210.051 0 260.464-4.2 96.623 71.418 180.644 168.041 184.845h16.804c50.413 4.2 210.051 4.2 260.464 0 96.623 4.2 180.644-71.418 184.845-168.041V381.768c4.2-96.623-71.418-180.644-168.041-184.845zM759.86 696.845c-12.604 29.407-33.609 50.412-58.815 58.814-121.83 16.805-247.86 16.805-373.891 0-29.407-12.603-50.412-33.608-58.814-58.814-12.604-63.015-16.805-126-12.604-184.845-4.2-63.015 0-126 12.604-184.845 12.603-29.407 33.608-50.412 58.814-58.814 121.83-16.805 247.86-16.805 373.891 0 29.407 12.603 50.412 33.608 58.815 58.814 12.603 63.015 16.804 126 12.603 184.845 4.2 63.015 0 126-12.603 184.845z"/></svg>',Lark:'<svg xmlns="http://www.w3.org/2000/svg" class="icon lark-icon" viewBox="0 0 700 700"><path fill="#fdfdfd" d="M0 350C0 156.7 156.7 0 350 0s350 156.7 350 350-156.7 350-350 350S0 543.3 0 350Z"/><path fill="#326ffd" d="M94.683 255.472c-1.188.99-3.547 1.424-3.565 2.971-.892 77.877-1.647 155.803.853 233.645.135 4.185 3.811 7.709 6.987 10.437 8.041 6.906 16.845 13.026 26.179 18.048 15.915 8.564 32.118 16.959 49.299 22.567 22.582 7.37 45.902 12.712 69.402 16.176 16.45 2.425 33.243 1.892 49.863 1.404 85.699-2.518 170.495-42.242 226.974-107.047 13.128-15.062 24.349-31.701 35.801-48.072.482-.689-.29-1.655-.435-2.483-11.645 12.501-23.322 25.66-38.015 34.376-38.027 22.561-80.103 18.178-120.414 4.963-24.658-8.083-49.594-15.711-73.208-26.468-32.043-14.597-63.264-31.14-93.363-49.411-50.119-30.424-92.859-71.794-136.358-111.106Z"/><path fill="#00d5b8" d="M373.34 355.289c22.389-21.264 43.857-43.542 67.167-63.793 15.84-13.761 40.614-23.584 58.792-32.162-13.932-44.24-30.142-84.389-60.513-120.46-3.54-4.204-7.91-9.366-13.399-9.603-81.245-3.519-162.641-2.296-243.958-1.541-1.72.016-3.262 2.127-3.451 3.836-.209 1.893 1.026 3.902 2.457 5.159 21.134 18.566 43.735 35.416 64.865 53.985 52.859 46.45 91.839 105.023 128.04 164.579Z"/><path fill="#133c99" d="M302.636 406.089c63.531 28.909 161.471 77.441 225.923 24.345 10.473-8.628 22.415-16.393 29.694-27.844 19.077-30.011 31.761-63.645 48.432-95.056 8.019-15.112 17.249-23.738 28.765-36.905-17.982-10.513-43.141-16.899-63.455-18.431-44.467-3.354-94.982 6.952-129.899 36.91-29.717 25.495-55.957 54.804-84.849 81.23-16.051 14.681-36.135 24.874-54.611 35.751Z"/></svg>',Lines:'<svg xmlns="http://www.w3.org/2000/svg" class="icon lines-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#00C300"/><path fill="#fff" d="M861.44 469.76C861.44 313.28 704 186.08 512 186.08s-349.44 127.2-349.44 283.68C162.56 608 287 727.52 455 752c11.52 2.4 27 7.68 30.72 17.28a71.04 71.04 0 0 1 0 31.68l-5.28 29.76c0 8.64-7.2 34.56 30.24 19a1104 1104 0 0 0 274.56-202.56 251.52 251.52 0 0 0 75-175zM375.2 562.88h-69.12a17.76 17.76 0 0 1-18-18v-139.2a17.76 17.76 0 0 1 18-18 18 18 0 0 1 18 18v120.48h51a19 19 0 0 1 18 19 18 18 0 0 1-18 18zm72-18a18 18 0 1 1-36.48 0v-139.2a18 18 0 0 1 36.48 0zm167.04 0a18 18 0 0 1-12.48 17.28H596a18 18 0 0 1-14.4-7.2l-69.6-96v85.92a18 18 0 1 1-36.48 0v-139.2A18 18 0 0 1 488 388.16h5.76a18 18 0 0 1 14.4 7.2l71.52 96v-85.92a18 18 0 1 1 36.48 0zm112.32-87.84a18 18 0 0 1 18 18 17.76 17.76 0 0 1-18 18h-51v32.64h51a19 19 0 0 1 18 19 18 18 0 0 1-18 18H656a18 18 0 0 1-18-18v-139.2a18 18 0 0 1 18-18.28h69.12a18 18 0 0 1 18 18 18 18 0 0 1-18 19h-49.44v32.64zm0 0"/></svg>',Linkedin:'<svg xmlns="http://www.w3.org/2000/svg" class="icon linkedin-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#4376B1"/><path fill="#F1F2F2" d="M838.301 555.94v225.157h-130.54V571.03c0-52.746-18.847-88.766-66.112-88.766-36.069 0-57.496 24.25-66.959 47.732-3.436 8.391-4.322 20.045-4.322 31.814v219.277h-130.55s1.752-355.784 0-392.613h130.56v55.637c-.263.438-.633.867-.867 1.285h.866v-1.285c17.349-26.694 48.287-64.856 117.651-64.856 85.884 0 150.273 56.114 150.273 176.685zm-535.05-356.72c-44.655 0-73.87 29.314-73.87 67.826 0 37.695 28.368 67.855 72.157 67.855h.847c45.532 0 73.842-30.16 73.842-67.855-.866-38.512-28.31-67.825-72.975-67.825zM237.14 781.098h130.5V388.474h-130.5v392.623z"/></svg>',Pinterest:'<svg xmlns="http://www.w3.org/2000/svg" class="icon pinterest-icon" viewBox="0 0 1024 1024"><path fill="#fff" d="M512 1023.147c282.773 0 512-228.288 512-509.888 0-281.622-229.227-509.91-512-509.91S0 231.637 0 513.26c0 281.6 229.227 509.888 512 509.888z"/><path fill="#CA242D" d="M512 3.35C229.248 3.35 0 231.658 0 513.258c0 216.128 134.848 400.789 325.312 475.05-4.63-40.277-8.427-102.378 1.685-146.453 9.28-39.872 59.84-253.483 59.84-253.483s-15.168-30.634-15.168-75.541c0-70.933 41.302-123.797 92.715-123.797 43.819 0 64.896 32.725 64.896 71.765 0 43.627-27.819 109.099-42.56 169.963-12.224 50.773 25.707 92.33 75.84 92.33 91.03 0 160.981-95.68 160.981-233.344 0-122.133-88.064-207.317-214.058-207.317-145.814 0-231.36 108.693-231.36 221.163 0 43.648 16.853 90.645 37.93 116.245a15.19 15.19 0 0 1 3.371 14.699c-3.797 15.936-12.65 50.773-14.336 57.92-2.09 9.216-7.573 11.328-17.28 6.698-64.043-29.781-104.085-122.538-104.085-197.653 0-160.747 117.162-308.459 338.389-308.459 177.408 0 315.627 125.888 315.627 294.614 0 175.829-111.254 317.269-265.472 317.269-51.84 0-100.715-26.859-117.163-58.752l-32.021 121.28c-11.371 44.48-42.56 99.883-63.638 133.867A516.01 516.01 0 0 0 511.168 1024c282.752 0 512-228.31 512-509.91C1024 231.66 794.752 3.35 512 3.35z"/></svg>',Pocket:'<svg xmlns="http://www.w3.org/2000/svg" class="icon pocket-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#EE4056"/><path fill="#fff" d="M716.52 309.066c12.549 0 23.172 4.394 31.87 13.182 8.697 8.788 13.023 19.48 13.023 32.006v150.4c0 33.975-6.568 66.41-19.705 97.307-13.138 30.918-30.76 57.487-52.89 79.685-22.106 22.197-48.562 39.864-79.367 52.888-30.804 13.024-63.081 19.547-96.876 19.547a246.897 246.897 0 0 1-97.215-19.547c-30.805-13.046-57.306-30.668-79.504-52.888-22.198-22.198-39.865-48.767-53.003-79.663a246.311 246.311 0 0 1-19.728-97.33V354.255c0-12.321 4.44-22.945 13.319-31.847a43.489 43.489 0 0 1 31.87-13.341H716.52zM512.574 617.339c9.06 0 16.989-3.216 23.738-9.581l117.103-112.415a32.622 32.622 0 0 0 10.691-24.62c0-9.469-3.33-17.533-9.966-24.191a32.958 32.958 0 0 0-24.237-10.012c-9.06 0-16.988 3.171-23.737 9.56l-93.547 89.808-93.614-89.809a33.185 33.185 0 0 0-23.443-9.559c-9.468 0-17.532 3.33-24.19 9.967-6.66 6.682-9.967 14.722-9.967 24.236 0 9.83 3.443 18.03 10.419 24.599l117.33 112.413c6.342 6.342 14.179 9.56 23.466 9.56l-.046.044z"/></svg>',QQ:'<svg xmlns="http://www.w3.org/2000/svg" class="icon qq-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#5eaade"/><path fill="#fff" d="M805.25 585.542c-15-48.188-32.25-88.688-58.781-154.97 4.125-174.093-68.25-314.905-234.938-314.905-168.562 0-239.344 143.625-234.844 314.906-26.625 66.375-43.78 106.594-58.78 154.969-31.876 102.656-21.563 145.125-13.688 146.062 16.875 2.063 65.718-77.25 65.718-77.25 0 45.938 23.625 105.844 74.813 149.063-24.75 7.593-80.344 28.03-67.125 50.437 10.688 18.094 183.938 11.531 233.906 5.906 49.969 5.625 223.219 12.188 233.906-5.906 13.22-22.312-42.468-42.844-67.125-50.437 51.188-43.313 74.813-103.22 74.813-149.063 0 0 48.844 79.313 65.719 77.25 7.969-1.031 18.281-43.5-13.594-146.062z"/></svg>',Qzone:'<svg xmlns="http://www.w3.org/2000/svg" class="icon qzone-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#0985DD"/><path fill="#fff" d="M722.38 595.24c22.486-4.056 11.345-12.424 2.156-11.346-16.685 1.72-40.43 1.925-66.562 1.284l3.029 17.79a656.641 656.641 0 0 0 61.402-7.702l-.025-.026zm68.95-174.915a5.287 5.287 0 0 0-4.493-3.645L598.42 389.29l-84.326-170.628c-1.925-3.594-7.958-3.594-9.857 0L419.885 389.29l-188.417 27.39a5.338 5.338 0 0 0-4.466 3.645 5.493 5.493 0 0 0 1.488 5.57l136.36 132.92-32.088 187.519a5.263 5.263 0 0 0 2.13 5.39c1.695 1.284 3.851 1.463 5.776.385l168.651-88.407 168.524 88.638 2.567.642 3.209-1.079c1.72-1.283 2.566-3.208 2.13-5.34l-24.591-143.648c-27.21 2.156-54.37 3.183-76.42 3.183-77.267 0-135.075-3.645-135.948-3.645a16.48 16.48 0 0 1-14.785-11.757 16.247 16.247 0 0 1 5.981-17.764l155.431-113.05c-99.959-7.906-183.873-6.418-184.721-6.418-13.502.642-25.67-3.645.642-14.375 4.518-1.694 109.2-23.72 230.362-7.445 6.673.847 12.013 5.75 13.733 12.194a16.61 16.61 0 0 1-6.263 17.302L497.204 571.598c27.826 5.802 100.37 12.014 160.745 13.502l-4.519-26.312 136.308-132.97a5.338 5.338 0 0 0 1.54-5.544l.051.051z"/></svg>',Reddit:'<svg xmlns="http://www.w3.org/2000/svg" class="icon reddit-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#ff4501"/><path fill="#fff" d="M617.199 680.55c5.666 5.974 5.666 11.742 0 17.34-21.845 23.143-56.9 34.714-105.199 34.714s-83.354-11.571-105.199-34.714c-5.666-5.598-5.666-11.366 0-17.34a10.445 10.445 0 0 1 7.919-3.379c3.174 0 5.803 1.127 7.919 3.38 16.93 18.295 46.728 27.408 89.361 27.408 42.325 0 72.09-9.113 89.361-27.409a10.445 10.445 0 0 1 7.919-3.379c3.174 0 5.803 1.127 7.919 3.38zm-176.06-136.635c9.182 9.694 13.756 21.47 13.756 35.294 0 13.79-4.574 25.565-13.756 35.26a44.134 44.134 0 0 1-33.28 14.54c-13.073 0-24.234-4.847-33.587-14.54a49.015 49.015 0 0 1-13.995-35.26c0-14.2 4.642-26.147 13.995-35.84 9.353-9.728 20.514-14.575 33.587-14.575 13.04 0 24.132 5.051 33.28 15.12zm222.584 35.294c0 13.79-4.642 25.565-13.995 35.26a44.954 44.954 0 0 1-33.587 14.54c-13.04 0-24.132-4.847-33.28-14.54a49.493 49.493 0 0 1-13.756-35.26c0-13.824 4.574-25.669 13.756-35.567 9.148-9.9 20.24-14.848 33.28-14.848 13.073 0 24.234 4.847 33.587 14.575 9.353 9.693 13.995 21.64 13.995 35.84zM796.433 512c0-18.295-6.144-33.963-18.5-47.036a59.494 59.494 0 0 0-44.92-19.592c-17.647 0-32.768 6.724-45.465 20.138-45.841-33.587-100.66-51.507-164.455-53.725l33.314-158.482 105.746 25.19c0 13.825 4.573 25.6 13.755 35.295 9.148 9.694 20.241 14.54 33.314 14.54 13.04 0 24.235-4.915 33.553-14.813 9.353-9.899 13.995-21.743 13.995-35.567s-4.642-25.669-13.995-35.567a44.578 44.578 0 0 0-33.553-14.814c-19.046 0-33.143 9.318-42.325 27.99L550.06 228.112c-6.69-1.877-11.094 1.126-13.21 8.977l-36.488 174.695c-63.454 2.594-117.897 20.718-163.363 54.272a59.187 59.187 0 0 0-46.011-20.685c-17.613 0-32.598 6.52-44.92 19.592a66.082 66.082 0 0 0-18.5 47.036c0 13.073 3.243 25.02 9.762 35.84 6.52 10.82 15.258 19.046 26.18 24.644a152.303 152.303 0 0 0-3.174 31.335c0 53.009 24.678 98.372 74.035 136.09 49.323 37.682 108.715 56.524 178.176 56.524 69.769 0 129.365-18.842 178.688-56.525 49.357-37.717 74.001-83.08 74.001-136.09 0-11.946-1.229-22.561-3.686-31.914 10.581-5.598 19.046-13.722 25.395-24.337 6.315-10.65 9.49-22.528 9.49-35.567z"/></svg>',Rss:'<svg xmlns="http://www.w3.org/2000/svg" class="icon rss-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#FD9B00"/><path fill="#fff" d="M687.981 740.39c0-225.92-183.617-409.777-409.21-409.777v-97.205c279.353 0 506.617 227.506 506.617 506.98H687.98zm-74.841 0h-97.538c0-63.567-24.688-123.245-69.43-167.993-44.762-44.856-104.24-69.556-167.54-69.556v-97.176c184.44 0 334.508 150.046 334.508 334.725zM346.038 605.166c37.35 0 67.514 30.357 67.514 67.39 0 37.146-30.163 67.177-67.514 67.177-37.219 0-67.458-30.03-67.458-67.176 0-37.034 30.24-67.391 67.458-67.391z"/></svg>',Steam:'<svg xmlns="http://www.w3.org/2000/svg" class="icon steam-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="488" fill="#fff"/><path fill="#13227a" d="M1008 512c0 274-222.4 496-496.8 496-227.6 0-419.2-152.6-478-360.8l190.4 78.6c12.8 64.2 69.8 112.8 137.8 112.8 78.4 0 143.8-64.8 140.4-147l169-120.4c104.2 2.6 191.6-81.8 191.6-187 0-103.2-84-187-187.4-187s-187.4 84-187.4 187v2.4L369.2 558c-31-1.8-61.4 6.8-87 24.2L16 472.2C36.4 216.8 250.2 16 511.2 16 785.6 16 1008 238 1008 512zM327.4 768.6l-61-25.2a105.58 105.58 0 0 0 54.4 51.6c53.8 22.4 115.6-3.2 138-56.8 10.8-26 11-54.6.2-80.6-10.8-26-31-46.4-57-57.2-25.8-10.8-53.4-10.4-77.8-1.2l63 26c39.6 16.4 58.4 61.8 41.8 101.4-16.6 39.8-62 58.4-101.6 42zM675 508.8c-68.8 0-124.8-56-124.8-124.6s56-124.6 124.8-124.6 124.8 56 124.8 124.6S744 508.8 675 508.8zm.2-31.2c51.8 0 93.8-42 93.8-93.6 0-51.8-42-93.6-93.8-93.6s-93.8 42-93.8 93.6c.2 51.6 42.2 93.6 93.8 93.6z"/></svg>',Twitter:'<svg xmlns="http://www.w3.org/2000/svg" class="icon twitter-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512"/><path fill="#FFF" d="m560 473 186-216h-44L540 445 411 257H262l195 284-195 226h44l171-198 136 198h149zM322 290h68l312 445h-68z"/></svg>',Wechat:'<svg xmlns="http://www.w3.org/2000/svg" class="icon wechat-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#2AAE67"/><path fill="#FFF" d="M501 417c-14 0-25-12-25-26s11-26 25-26 26 12 26 26-12 26-26 26m-144 0c-15 0-26-12-26-26s11-26 26-26 25 12 25 26-11 26-25 26m72-150c-120 0-217 82-217 183 0 55 29 104 75 138a15 15 0 0 1 6 11l-1 5-9 37-2 5c0 4 4 8 8 8l4-2 47-27c4-3 8-4 12-4l6 1a255 255 0 0 0 83 10c-5-14-7-29-7-45 0-92 88-166 197-166h9c-16-87-103-154-211-154"/><path fill="#FFF" d="M692 561c-13 0-23-10-23-23 0-12 10-22 23-22 12 0 22 10 22 22 0 13-10 23-22 23m-121 0c-12 0-23-10-23-23 0-12 11-22 23-22s23 10 23 22c0 13-11 23-23 23m179 141c38-28 62-69 62-115 0-84-81-152-181-152s-180 68-180 152 80 152 180 152a212 212 0 0 0 65-9l9 3 40 23 3 1a6 6 0 0 0 6-6l-1-5-8-30v-4c0-4 2-8 5-10"/></svg>',Weibo:'<svg xmlns="http://www.w3.org/2000/svg" class="icon weibo-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#D52C2B"/><path fill="#D52C2B" d="M256 601c0 68 91 124 203 124 113 0 203-56 203-124s-90-123-203-123c-112 0-203 55-203 123"/><path fill="#FFF" d="M464 715c-99 9-185-35-191-98-7-64 68-123 168-133 99-10 185 34 191 98 7 64-69 123-168 133m199-212c-9-2-15-4-10-15 9-23 10-44 0-58-19-27-73-26-134-1 0 0-19 8-14-7 9-29 8-54-7-68-33-33-121 1-196 75-57 55-90 114-90 165 0 97 127 156 252 156 163 0 271-93 271-167 0-44-38-69-72-80m108-177c-39-43-98-59-151-48-13 3-20 14-18 27 3 12 15 19 27 17 39-8 80 3 108 34 27 29 36 70 24 108a22 22 0 0 0 14 28c12 4 25-3 29-14 18-53 5-112-33-152"/><path fill="#FFF" d="M711 379a78 78 0 0 0-74-23c-11 2-17 12-15 22v1c2 10 12 17 23 15a38 38 0 0 1 36 11c10 10 12 24 8 36a19 19 0 0 0 13 25c10 3 21-3 25-13a74 74 0 0 0-16-74M470 599c-4 6-12 9-18 6-6-2-7-8-4-14s11-9 17-6c6 2 8 8 5 14m-32 40a38 38 0 0 1-46 15c-15-7-20-25-10-39 10-15 29-21 45-15 15 7 20 24 11 39m36-106c-47-12-101 11-121 52-21 41-1 87 47 102 49 16 108-8 128-53 20-44-5-89-54-101"/></svg>',Whatsapp:'<svg xmlns="http://www.w3.org/2000/svg" class="icon whatsapp-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#31B84C"/><path fill="#fff" d="m192.021 832 45.227-164.33a315.413 315.413 0 0 1-42.539-158.529C194.731 334.251 337.707 192 513.344 192c84.587-.213 165.76 33.28 225.387 93.013A314.453 314.453 0 0 1 832 509.376c-.085 174.848-143.04 317.141-318.656 317.141h-.15a319.61 319.61 0 0 1-152.277-38.613L192 832h.021zm241.686-455.467c-6.443-15.445-13.014-13.354-17.92-13.61-4.63-.214-9.942-.256-15.254-.256a29.227 29.227 0 0 0-21.226 9.898c-7.296 7.958-27.84 27.136-27.84 66.134s28.501 76.672 32.49 81.962c3.968 5.291 56.15 85.334 136 119.638 19.008 8.17 33.814 13.056 45.398 16.704 19.072 6.037 36.437 5.184 50.133 3.157 15.296-2.283 47.125-19.2 53.76-37.675 6.613-18.56 6.613-34.389 4.65-37.717-1.983-3.264-7.295-5.27-15.274-9.237-7.957-3.947-47.125-23.126-54.4-25.771-7.296-2.667-12.587-3.968-17.92 3.947-5.312 7.936-20.565 25.792-25.195 31.061-4.65 5.312-9.301 5.973-17.258 2.005-7.979-3.968-33.622-12.33-64-39.338-23.68-20.992-39.68-46.955-44.331-54.912-4.65-7.915-.47-12.203 3.52-16.15 3.563-3.541 7.936-9.258 11.904-13.866 3.99-4.651 5.333-7.958 7.979-13.227 2.645-5.29 1.322-9.92-.64-13.888-2.006-3.968-17.92-42.987-24.555-58.859h-.021z"/></svg>',Youtube:'<svg xmlns="http://www.w3.org/2000/svg" class="icon youtube-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#DD1829"/><path fill="#fff" d="M800.305 372.2c-12.805-42.429-22.873-65.942-65.303-71.064 0 0-113.644-5.761-226.64-5.761-111.716 0-222.797 5.761-222.797 5.761-44.992 5.122-55.7 29.915-67.223 71.065 0 0-11.524 65.527-11.524 131.886 0 68.066 11.524 137.008 11.524 137.008 8.963 39.87 27.354 65.943 67.223 71.065 0 0 123.292 7.682 240.724 7.682 106.78 0 208.714-7.682 208.714-7.682 39.87-7.682 53.78-28.635 65.303-71.065 0 0 11.523-63.022 11.523-128.045 0-69.288-11.524-140.85-11.524-140.85zM448.82 619.97V393.33l174.781 113.32L448.82 619.97z"/></svg>',Zhihu:'<svg xmlns="http://www.w3.org/2000/svg" class="icon zhihu-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#006CE2"/><path fill="#fff" d="M513.65 491.261H411.551c1.615-16.154 5.815-60.095 5.815-84.973 0-24.88-.323-60.742-.323-60.742h102.744V329.39c0-21.647-9.37-31.34-17.124-31.34h-178.67s5.169-17.77 10.015-36.186c4.846-18.417 15.832-44.264 15.832-44.264-63.003 4.2-67.958 50.941-81.743 92.729-13.787 41.785-24.556 62.356-44.586 107.912 27.786 0 55.249-13.57 66.879-32.309 11.631-18.74 16.908-40.71 16.908-40.71h62.035v59.019c0 21.107-3.878 87.45-3.878 87.45H254.742c-19.386 0-29.724 48.894-29.724 48.894h133.76c-8.4 75.82-26.493 106.191-51.91 152.716-25.418 46.525-92.728 99.406-92.728 99.406 41.033 11.63 86.589-3.555 105.974-21.972 19.386-18.417 35.863-49.756 47.817-72.838 11.954-23.081 21.972-65.124 21.972-65.124L498.462 766.86s4.846-24.233 6.461-39.418c1.616-15.186-.755-26.385-4.63-35.433-3.878-9.046-15.509-21.54-31.018-39.634-15.507-18.094-48.034-52.879-48.034-52.879s-15.832 11.63-28.108 21.001c9.046-21.97 16.262-79.695 16.262-79.695h122.343v-20.249c.003-17.66-7.319-29.29-18.089-29.29zm287.337-200.747h-234.35a4.308 4.308 0 0 0-4.309 4.308v435.099a4.308 4.308 0 0 0 4.308 4.308h40.226l14.7 50.402 81.096-50.402h98.328a4.308 4.308 0 0 0 4.308-4.308v-435.1a4.308 4.308 0 0 0-4.308-4.308zM755.97 684.47h-52.343l-61.548 39.095-10.823-39.095h-18.738V338.116H755.97v346.355z"/></svg>'}}},i=>{i.O(0,[1087,9333],(()=>i(i.s=8731))),i.O()}]);